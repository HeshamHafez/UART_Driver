
uart_transmiter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ac4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000ac4  00000b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006a  0080006a  00000b62  2**0
                  ALLOC
  3 .stab         00001164  00000000  00000000  00000b64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c55  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 60 05 	jmp	0xac0	; 0xac0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
 */

#include"uart.h"

int main(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	UART_Init();
  9a:	0e 94 99 02 	call	0x532	; 0x532 <UART_Init>
  9e:	ff cf       	rjmp	.-2      	; 0x9e <main+0xc>

000000a0 <DIO_WritePin>:
 */

#include"reg_file.h"

void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
  a0:	df 93       	push	r29
  a2:	cf 93       	push	r28
  a4:	00 d0       	rcall	.+0      	; 0xa6 <DIO_WritePin+0x6>
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	89 83       	std	Y+1, r24	; 0x01
  ac:	6a 83       	std	Y+2, r22	; 0x02
	if((PinNum >= PIN0) && (PinNum <= PIN7))
  ae:	89 81       	ldd	r24, Y+1	; 0x01
  b0:	88 30       	cpi	r24, 0x08	; 8
  b2:	60 f5       	brcc	.+88     	; 0x10c <DIO_WritePin+0x6c>
	{
		if(PinValue == 0)
  b4:	8a 81       	ldd	r24, Y+2	; 0x02
  b6:	88 23       	and	r24, r24
  b8:	a9 f4       	brne	.+42     	; 0xe4 <DIO_WritePin+0x44>
		{
			CLEAR_BIT(PORTA,PinNum);
  ba:	ab e3       	ldi	r26, 0x3B	; 59
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	eb e3       	ldi	r30, 0x3B	; 59
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	48 2f       	mov	r20, r24
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	28 2f       	mov	r18, r24
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 2e       	mov	r0, r18
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_WritePin+0x38>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	0a 94       	dec	r0
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_WritePin+0x34>
  dc:	80 95       	com	r24
  de:	84 23       	and	r24, r20
  e0:	8c 93       	st	X, r24
  e2:	b2 c0       	rjmp	.+356    	; 0x248 <DIO_WritePin+0x1a8>
		}
		else
		{
			SET_BIT(PORTA,PinNum);
  e4:	ab e3       	ldi	r26, 0x3B	; 59
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	eb e3       	ldi	r30, 0x3B	; 59
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	48 2f       	mov	r20, r24
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	28 2f       	mov	r18, r24
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 2e       	mov	r0, r18
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_WritePin+0x62>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	0a 94       	dec	r0
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_WritePin+0x5e>
 106:	84 2b       	or	r24, r20
 108:	8c 93       	st	X, r24
 10a:	9e c0       	rjmp	.+316    	; 0x248 <DIO_WritePin+0x1a8>
		}
	}
	else if((PinNum >= PIN8) && (PinNum <= PIN15))
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	88 30       	cpi	r24, 0x08	; 8
 110:	90 f1       	brcs	.+100    	; 0x176 <DIO_WritePin+0xd6>
 112:	89 81       	ldd	r24, Y+1	; 0x01
 114:	80 31       	cpi	r24, 0x10	; 16
 116:	78 f5       	brcc	.+94     	; 0x176 <DIO_WritePin+0xd6>
	{
		PinNum = PinNum - 8;
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	88 50       	subi	r24, 0x08	; 8
 11c:	89 83       	std	Y+1, r24	; 0x01
		if(PinValue == 0)
 11e:	8a 81       	ldd	r24, Y+2	; 0x02
 120:	88 23       	and	r24, r24
 122:	a9 f4       	brne	.+42     	; 0x14e <DIO_WritePin+0xae>
		{
			CLEAR_BIT(PORTB,PinNum);
 124:	a8 e3       	ldi	r26, 0x38	; 56
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	e8 e3       	ldi	r30, 0x38	; 56
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	48 2f       	mov	r20, r24
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	28 2f       	mov	r18, r24
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 2e       	mov	r0, r18
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_WritePin+0xa2>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_WritePin+0x9e>
 146:	80 95       	com	r24
 148:	84 23       	and	r24, r20
 14a:	8c 93       	st	X, r24
 14c:	7d c0       	rjmp	.+250    	; 0x248 <DIO_WritePin+0x1a8>
		}
		else
		{
			SET_BIT(PORTB,PinNum);
 14e:	a8 e3       	ldi	r26, 0x38	; 56
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	e8 e3       	ldi	r30, 0x38	; 56
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	48 2f       	mov	r20, r24
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	28 2f       	mov	r18, r24
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 2e       	mov	r0, r18
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_WritePin+0xcc>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_WritePin+0xc8>
 170:	84 2b       	or	r24, r20
 172:	8c 93       	st	X, r24
 174:	69 c0       	rjmp	.+210    	; 0x248 <DIO_WritePin+0x1a8>
		}

	}
	else if((PinNum >= PIN16) && (PinNum <= PIN23))
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	80 31       	cpi	r24, 0x10	; 16
 17a:	90 f1       	brcs	.+100    	; 0x1e0 <DIO_WritePin+0x140>
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	88 31       	cpi	r24, 0x18	; 24
 180:	78 f5       	brcc	.+94     	; 0x1e0 <DIO_WritePin+0x140>
	{
		PinNum = PinNum - 16;
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	80 51       	subi	r24, 0x10	; 16
 186:	89 83       	std	Y+1, r24	; 0x01
		if(PinValue == 0)
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	88 23       	and	r24, r24
 18c:	a9 f4       	brne	.+42     	; 0x1b8 <DIO_WritePin+0x118>
		{
			CLEAR_BIT(PORTC,PinNum);
 18e:	a5 e3       	ldi	r26, 0x35	; 53
 190:	b0 e0       	ldi	r27, 0x00	; 0
 192:	e5 e3       	ldi	r30, 0x35	; 53
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	48 2f       	mov	r20, r24
 19a:	89 81       	ldd	r24, Y+1	; 0x01
 19c:	28 2f       	mov	r18, r24
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 2e       	mov	r0, r18
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_WritePin+0x10c>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	0a 94       	dec	r0
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_WritePin+0x108>
 1b0:	80 95       	com	r24
 1b2:	84 23       	and	r24, r20
 1b4:	8c 93       	st	X, r24
 1b6:	48 c0       	rjmp	.+144    	; 0x248 <DIO_WritePin+0x1a8>
		}
		else
		{
			SET_BIT(PORTC,PinNum);
 1b8:	a5 e3       	ldi	r26, 0x35	; 53
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	e5 e3       	ldi	r30, 0x35	; 53
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	48 2f       	mov	r20, r24
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 2e       	mov	r0, r18
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_WritePin+0x136>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	0a 94       	dec	r0
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_WritePin+0x132>
 1da:	84 2b       	or	r24, r20
 1dc:	8c 93       	st	X, r24
 1de:	34 c0       	rjmp	.+104    	; 0x248 <DIO_WritePin+0x1a8>
		}

	}
	else if((PinNum >= PIN24) && (PinNum <= PIN31))
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
 1e2:	88 31       	cpi	r24, 0x18	; 24
 1e4:	88 f1       	brcs	.+98     	; 0x248 <DIO_WritePin+0x1a8>
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	80 32       	cpi	r24, 0x20	; 32
 1ea:	70 f5       	brcc	.+92     	; 0x248 <DIO_WritePin+0x1a8>
	{
		PinNum = PinNum - 24;
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	88 51       	subi	r24, 0x18	; 24
 1f0:	89 83       	std	Y+1, r24	; 0x01
		if(PinValue == 0)
 1f2:	8a 81       	ldd	r24, Y+2	; 0x02
 1f4:	88 23       	and	r24, r24
 1f6:	a9 f4       	brne	.+42     	; 0x222 <DIO_WritePin+0x182>
		{
			CLEAR_BIT(PORTD,PinNum);
 1f8:	a2 e3       	ldi	r26, 0x32	; 50
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	e2 e3       	ldi	r30, 0x32	; 50
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	48 2f       	mov	r20, r24
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	28 2f       	mov	r18, r24
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 2e       	mov	r0, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_WritePin+0x176>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_WritePin+0x172>
 21a:	80 95       	com	r24
 21c:	84 23       	and	r24, r20
 21e:	8c 93       	st	X, r24
 220:	13 c0       	rjmp	.+38     	; 0x248 <DIO_WritePin+0x1a8>
		}
		else
		{
			SET_BIT(PORTD,PinNum);
 222:	a2 e3       	ldi	r26, 0x32	; 50
 224:	b0 e0       	ldi	r27, 0x00	; 0
 226:	e2 e3       	ldi	r30, 0x32	; 50
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	48 2f       	mov	r20, r24
 22e:	89 81       	ldd	r24, Y+1	; 0x01
 230:	28 2f       	mov	r18, r24
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 2e       	mov	r0, r18
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_WritePin+0x1a0>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	0a 94       	dec	r0
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_WritePin+0x19c>
 244:	84 2b       	or	r24, r20
 246:	8c 93       	st	X, r24
		}

	}
}
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	cf 91       	pop	r28
 24e:	df 91       	pop	r29
 250:	08 95       	ret

00000252 <DIO_ReadPin>:

uint8 DIO_ReadPin(uint8 PinNum)
{
 252:	df 93       	push	r29
 254:	cf 93       	push	r28
 256:	00 d0       	rcall	.+0      	; 0x258 <DIO_ReadPin+0x6>
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
 25c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value;
	if((PinNum >= PIN0) && (PinNum <= PIN7))
 25e:	8a 81       	ldd	r24, Y+2	; 0x02
 260:	88 30       	cpi	r24, 0x08	; 8
 262:	90 f4       	brcc	.+36     	; 0x288 <DIO_ReadPin+0x36>
	{
		value = IS_BIT_SET(PINA,PinNum);
 264:	e9 e3       	ldi	r30, 0x39	; 57
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	48 2f       	mov	r20, r24
 26c:	8a 81       	ldd	r24, Y+2	; 0x02
 26e:	28 2f       	mov	r18, r24
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 2e       	mov	r0, r18
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_ReadPin+0x2c>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	0a 94       	dec	r0
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_ReadPin+0x28>
 282:	84 23       	and	r24, r20
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	50 c0       	rjmp	.+160    	; 0x328 <DIO_ReadPin+0xd6>
	}

	else if((PinNum >= PIN8) && (PinNum <= PIN15))
 288:	8a 81       	ldd	r24, Y+2	; 0x02
 28a:	88 30       	cpi	r24, 0x08	; 8
 28c:	c0 f0       	brcs	.+48     	; 0x2be <DIO_ReadPin+0x6c>
 28e:	8a 81       	ldd	r24, Y+2	; 0x02
 290:	80 31       	cpi	r24, 0x10	; 16
 292:	a8 f4       	brcc	.+42     	; 0x2be <DIO_ReadPin+0x6c>
	{
		PinNum = PinNum -8;
 294:	8a 81       	ldd	r24, Y+2	; 0x02
 296:	88 50       	subi	r24, 0x08	; 8
 298:	8a 83       	std	Y+2, r24	; 0x02
		value = IS_BIT_SET(PINB,PinNum);
 29a:	e6 e3       	ldi	r30, 0x36	; 54
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	48 2f       	mov	r20, r24
 2a2:	8a 81       	ldd	r24, Y+2	; 0x02
 2a4:	28 2f       	mov	r18, r24
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 2e       	mov	r0, r18
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_ReadPin+0x62>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	0a 94       	dec	r0
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_ReadPin+0x5e>
 2b8:	84 23       	and	r24, r20
 2ba:	89 83       	std	Y+1, r24	; 0x01
 2bc:	35 c0       	rjmp	.+106    	; 0x328 <DIO_ReadPin+0xd6>

	}
	else if((PinNum >= PIN16) && (PinNum <= PIN23))
 2be:	8a 81       	ldd	r24, Y+2	; 0x02
 2c0:	80 31       	cpi	r24, 0x10	; 16
 2c2:	c0 f0       	brcs	.+48     	; 0x2f4 <DIO_ReadPin+0xa2>
 2c4:	8a 81       	ldd	r24, Y+2	; 0x02
 2c6:	88 31       	cpi	r24, 0x18	; 24
 2c8:	a8 f4       	brcc	.+42     	; 0x2f4 <DIO_ReadPin+0xa2>
	{
		PinNum = PinNum -16;
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	80 51       	subi	r24, 0x10	; 16
 2ce:	8a 83       	std	Y+2, r24	; 0x02
		value = IS_BIT_SET(PINC,PinNum);
 2d0:	e3 e3       	ldi	r30, 0x33	; 51
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	48 2f       	mov	r20, r24
 2d8:	8a 81       	ldd	r24, Y+2	; 0x02
 2da:	28 2f       	mov	r18, r24
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 2e       	mov	r0, r18
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_ReadPin+0x98>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	0a 94       	dec	r0
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_ReadPin+0x94>
 2ee:	84 23       	and	r24, r20
 2f0:	89 83       	std	Y+1, r24	; 0x01
 2f2:	1a c0       	rjmp	.+52     	; 0x328 <DIO_ReadPin+0xd6>

	}
	else if((PinNum >= PIN24) && (PinNum <= PIN31))
 2f4:	8a 81       	ldd	r24, Y+2	; 0x02
 2f6:	88 31       	cpi	r24, 0x18	; 24
 2f8:	b8 f0       	brcs	.+46     	; 0x328 <DIO_ReadPin+0xd6>
 2fa:	8a 81       	ldd	r24, Y+2	; 0x02
 2fc:	80 32       	cpi	r24, 0x20	; 32
 2fe:	a0 f4       	brcc	.+40     	; 0x328 <DIO_ReadPin+0xd6>
	{
		PinNum = PinNum -24;
 300:	8a 81       	ldd	r24, Y+2	; 0x02
 302:	88 51       	subi	r24, 0x18	; 24
 304:	8a 83       	std	Y+2, r24	; 0x02
		value = IS_BIT_SET(PIND,PinNum);
 306:	e0 e3       	ldi	r30, 0x30	; 48
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	48 2f       	mov	r20, r24
 30e:	8a 81       	ldd	r24, Y+2	; 0x02
 310:	28 2f       	mov	r18, r24
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 2e       	mov	r0, r18
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_ReadPin+0xce>
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	0a 94       	dec	r0
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_ReadPin+0xca>
 324:	84 23       	and	r24, r20
 326:	89 83       	std	Y+1, r24	; 0x01
	}

	if(value != 0)
 328:	89 81       	ldd	r24, Y+1	; 0x01
 32a:	88 23       	and	r24, r24
 32c:	11 f0       	breq	.+4      	; 0x332 <DIO_ReadPin+0xe0>
	{
		value = 1;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	89 83       	std	Y+1, r24	; 0x01
	}
	return value;
 332:	89 81       	ldd	r24, Y+1	; 0x01
}
 334:	0f 90       	pop	r0
 336:	0f 90       	pop	r0
 338:	cf 91       	pop	r28
 33a:	df 91       	pop	r29
 33c:	08 95       	ret

0000033e <DIO_SetPinDirection>:

void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
 33e:	df 93       	push	r29
 340:	cf 93       	push	r28
 342:	00 d0       	rcall	.+0      	; 0x344 <DIO_SetPinDirection+0x6>
 344:	cd b7       	in	r28, 0x3d	; 61
 346:	de b7       	in	r29, 0x3e	; 62
 348:	89 83       	std	Y+1, r24	; 0x01
 34a:	6a 83       	std	Y+2, r22	; 0x02
	if((PinNum >= PIN0) && (PinNum <= PIN7))
 34c:	89 81       	ldd	r24, Y+1	; 0x01
 34e:	88 30       	cpi	r24, 0x08	; 8
 350:	58 f5       	brcc	.+86     	; 0x3a8 <DIO_SetPinDirection+0x6a>
	{
		if(PinDirection == 0)
 352:	8a 81       	ldd	r24, Y+2	; 0x02
 354:	88 23       	and	r24, r24
 356:	a9 f4       	brne	.+42     	; 0x382 <DIO_SetPinDirection+0x44>
		{
			CLEAR_BIT(DDRA,PinNum);
 358:	aa e3       	ldi	r26, 0x3A	; 58
 35a:	b0 e0       	ldi	r27, 0x00	; 0
 35c:	ea e3       	ldi	r30, 0x3A	; 58
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	48 2f       	mov	r20, r24
 364:	89 81       	ldd	r24, Y+1	; 0x01
 366:	28 2f       	mov	r18, r24
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	02 2e       	mov	r0, r18
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_SetPinDirection+0x38>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	0a 94       	dec	r0
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_SetPinDirection+0x34>
 37a:	80 95       	com	r24
 37c:	84 23       	and	r24, r20
 37e:	8c 93       	st	X, r24
 380:	13 c0       	rjmp	.+38     	; 0x3a8 <DIO_SetPinDirection+0x6a>
		}
		else
		{
			SET_BIT(DDRA,PinNum);
 382:	aa e3       	ldi	r26, 0x3A	; 58
 384:	b0 e0       	ldi	r27, 0x00	; 0
 386:	ea e3       	ldi	r30, 0x3A	; 58
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	48 2f       	mov	r20, r24
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	28 2f       	mov	r18, r24
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 2e       	mov	r0, r18
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_SetPinDirection+0x62>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	0a 94       	dec	r0
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_SetPinDirection+0x5e>
 3a4:	84 2b       	or	r24, r20
 3a6:	8c 93       	st	X, r24
		}
	}
	if((PinNum >= PIN8) && (PinNum <= PIN15))
 3a8:	89 81       	ldd	r24, Y+1	; 0x01
 3aa:	88 30       	cpi	r24, 0x08	; 8
 3ac:	88 f1       	brcs	.+98     	; 0x410 <DIO_SetPinDirection+0xd2>
 3ae:	89 81       	ldd	r24, Y+1	; 0x01
 3b0:	80 31       	cpi	r24, 0x10	; 16
 3b2:	70 f5       	brcc	.+92     	; 0x410 <DIO_SetPinDirection+0xd2>
	{
		PinNum = PinNum -8;
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
 3b6:	88 50       	subi	r24, 0x08	; 8
 3b8:	89 83       	std	Y+1, r24	; 0x01
		if(PinDirection == 0)
 3ba:	8a 81       	ldd	r24, Y+2	; 0x02
 3bc:	88 23       	and	r24, r24
 3be:	a9 f4       	brne	.+42     	; 0x3ea <DIO_SetPinDirection+0xac>
		{
			CLEAR_BIT(DDRB,PinNum);
 3c0:	a7 e3       	ldi	r26, 0x37	; 55
 3c2:	b0 e0       	ldi	r27, 0x00	; 0
 3c4:	e7 e3       	ldi	r30, 0x37	; 55
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	48 2f       	mov	r20, r24
 3cc:	89 81       	ldd	r24, Y+1	; 0x01
 3ce:	28 2f       	mov	r18, r24
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 2e       	mov	r0, r18
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_SetPinDirection+0xa0>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	0a 94       	dec	r0
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_SetPinDirection+0x9c>
 3e2:	80 95       	com	r24
 3e4:	84 23       	and	r24, r20
 3e6:	8c 93       	st	X, r24
 3e8:	13 c0       	rjmp	.+38     	; 0x410 <DIO_SetPinDirection+0xd2>
		}
		else
		{
			SET_BIT(DDRB,PinNum);
 3ea:	a7 e3       	ldi	r26, 0x37	; 55
 3ec:	b0 e0       	ldi	r27, 0x00	; 0
 3ee:	e7 e3       	ldi	r30, 0x37	; 55
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	48 2f       	mov	r20, r24
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	28 2f       	mov	r18, r24
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 2e       	mov	r0, r18
 402:	02 c0       	rjmp	.+4      	; 0x408 <DIO_SetPinDirection+0xca>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	0a 94       	dec	r0
 40a:	e2 f7       	brpl	.-8      	; 0x404 <DIO_SetPinDirection+0xc6>
 40c:	84 2b       	or	r24, r20
 40e:	8c 93       	st	X, r24
		}
	}
	if((PinNum >= PIN16) && (PinNum <= PIN23))
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	80 31       	cpi	r24, 0x10	; 16
 414:	88 f1       	brcs	.+98     	; 0x478 <DIO_SetPinDirection+0x13a>
 416:	89 81       	ldd	r24, Y+1	; 0x01
 418:	88 31       	cpi	r24, 0x18	; 24
 41a:	70 f5       	brcc	.+92     	; 0x478 <DIO_SetPinDirection+0x13a>
	{
		PinNum = PinNum - 16;
 41c:	89 81       	ldd	r24, Y+1	; 0x01
 41e:	80 51       	subi	r24, 0x10	; 16
 420:	89 83       	std	Y+1, r24	; 0x01
		if(PinDirection == 0)
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	88 23       	and	r24, r24
 426:	a9 f4       	brne	.+42     	; 0x452 <DIO_SetPinDirection+0x114>
		{
			CLEAR_BIT(DDRC,PinNum);
 428:	a4 e3       	ldi	r26, 0x34	; 52
 42a:	b0 e0       	ldi	r27, 0x00	; 0
 42c:	e4 e3       	ldi	r30, 0x34	; 52
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	48 2f       	mov	r20, r24
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	28 2f       	mov	r18, r24
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	02 2e       	mov	r0, r18
 440:	02 c0       	rjmp	.+4      	; 0x446 <DIO_SetPinDirection+0x108>
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	0a 94       	dec	r0
 448:	e2 f7       	brpl	.-8      	; 0x442 <DIO_SetPinDirection+0x104>
 44a:	80 95       	com	r24
 44c:	84 23       	and	r24, r20
 44e:	8c 93       	st	X, r24
 450:	13 c0       	rjmp	.+38     	; 0x478 <DIO_SetPinDirection+0x13a>
		}
		else
		{
			SET_BIT(DDRC,PinNum);
 452:	a4 e3       	ldi	r26, 0x34	; 52
 454:	b0 e0       	ldi	r27, 0x00	; 0
 456:	e4 e3       	ldi	r30, 0x34	; 52
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	48 2f       	mov	r20, r24
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	28 2f       	mov	r18, r24
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 2e       	mov	r0, r18
 46a:	02 c0       	rjmp	.+4      	; 0x470 <DIO_SetPinDirection+0x132>
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	0a 94       	dec	r0
 472:	e2 f7       	brpl	.-8      	; 0x46c <DIO_SetPinDirection+0x12e>
 474:	84 2b       	or	r24, r20
 476:	8c 93       	st	X, r24
		}
	}
	if((PinNum >= PIN24) && (PinNum <= PIN31))
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	88 31       	cpi	r24, 0x18	; 24
 47c:	88 f1       	brcs	.+98     	; 0x4e0 <DIO_SetPinDirection+0x1a2>
 47e:	89 81       	ldd	r24, Y+1	; 0x01
 480:	80 32       	cpi	r24, 0x20	; 32
 482:	70 f5       	brcc	.+92     	; 0x4e0 <DIO_SetPinDirection+0x1a2>
	{
		PinNum = PinNum - 24;
 484:	89 81       	ldd	r24, Y+1	; 0x01
 486:	88 51       	subi	r24, 0x18	; 24
 488:	89 83       	std	Y+1, r24	; 0x01
		if(PinDirection == 0)
 48a:	8a 81       	ldd	r24, Y+2	; 0x02
 48c:	88 23       	and	r24, r24
 48e:	a9 f4       	brne	.+42     	; 0x4ba <DIO_SetPinDirection+0x17c>
		{
			CLEAR_BIT(DDRD,PinNum);
 490:	a1 e3       	ldi	r26, 0x31	; 49
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	e1 e3       	ldi	r30, 0x31	; 49
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	48 2f       	mov	r20, r24
 49c:	89 81       	ldd	r24, Y+1	; 0x01
 49e:	28 2f       	mov	r18, r24
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 2e       	mov	r0, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <DIO_SetPinDirection+0x170>
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	0a 94       	dec	r0
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <DIO_SetPinDirection+0x16c>
 4b2:	80 95       	com	r24
 4b4:	84 23       	and	r24, r20
 4b6:	8c 93       	st	X, r24
 4b8:	13 c0       	rjmp	.+38     	; 0x4e0 <DIO_SetPinDirection+0x1a2>
		}
		else
		{
			SET_BIT(DDRD,PinNum);
 4ba:	a1 e3       	ldi	r26, 0x31	; 49
 4bc:	b0 e0       	ldi	r27, 0x00	; 0
 4be:	e1 e3       	ldi	r30, 0x31	; 49
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	48 2f       	mov	r20, r24
 4c6:	89 81       	ldd	r24, Y+1	; 0x01
 4c8:	28 2f       	mov	r18, r24
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 2e       	mov	r0, r18
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_SetPinDirection+0x19a>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	0a 94       	dec	r0
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_SetPinDirection+0x196>
 4dc:	84 2b       	or	r24, r20
 4de:	8c 93       	st	X, r24
		}
	}

}
 4e0:	0f 90       	pop	r0
 4e2:	0f 90       	pop	r0
 4e4:	cf 91       	pop	r28
 4e6:	df 91       	pop	r29
 4e8:	08 95       	ret

000004ea <__vector_15>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(USART_TXC_vect)
{
 4ea:	1f 92       	push	r1
 4ec:	0f 92       	push	r0
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	0f 92       	push	r0
 4f2:	11 24       	eor	r1, r1
 4f4:	8f 93       	push	r24
 4f6:	ef 93       	push	r30
 4f8:	ff 93       	push	r31
 4fa:	df 93       	push	r29
 4fc:	cf 93       	push	r28
 4fe:	cd b7       	in	r28, 0x3d	; 61
 500:	de b7       	in	r29, 0x3e	; 62
	if(g_flag != LOW)
 502:	80 91 6a 00 	lds	r24, 0x006A
 506:	88 23       	and	r24, r24
 508:	51 f0       	breq	.+20     	; 0x51e <__vector_15+0x34>
	{
		UART_UDR = g_flag;
 50a:	ec e2       	ldi	r30, 0x2C	; 44
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 91 6a 00 	lds	r24, 0x006A
 512:	80 83       	st	Z, r24
		g_index++ ;
 514:	80 91 6b 00 	lds	r24, 0x006B
 518:	8f 5f       	subi	r24, 0xFF	; 255
 51a:	80 93 6b 00 	sts	0x006B, r24
	}
}
 51e:	cf 91       	pop	r28
 520:	df 91       	pop	r29
 522:	ff 91       	pop	r31
 524:	ef 91       	pop	r30
 526:	8f 91       	pop	r24
 528:	0f 90       	pop	r0
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	0f 90       	pop	r0
 52e:	1f 90       	pop	r1
 530:	18 95       	reti

00000532 <UART_Init>:
 * Outputs:			NULL
 *
 * Return:			Status to check function execution
 *******************************************************************************/
Status UART_Init(void)
{
 532:	df 93       	push	r29
 534:	cf 93       	push	r28
 536:	00 d0       	rcall	.+0      	; 0x538 <UART_Init+0x6>
 538:	0f 92       	push	r0
 53a:	cd b7       	in	r28, 0x3d	; 61
 53c:	de b7       	in	r29, 0x3e	; 62
	uint16 UART_UBRR = 0u;
 53e:	1a 82       	std	Y+2, r1	; 0x02
 540:	19 82       	std	Y+1, r1	; 0x01
	if(UART_Config.DoubleSpeed == UART_DoubleSpeedDisable)
 542:	80 91 62 00 	lds	r24, 0x0062
 546:	88 23       	and	r24, r24
 548:	71 f5       	brne	.+92     	; 0x5a6 <UART_Init+0x74>
	{
		CLEAR_BIT(UART_UCSRA,UART_U2X);
 54a:	ab e2       	ldi	r26, 0x2B	; 43
 54c:	b0 e0       	ldi	r27, 0x00	; 0
 54e:	eb e2       	ldi	r30, 0x2B	; 43
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	8d 7f       	andi	r24, 0xFD	; 253
 556:	8c 93       	st	X, r24
		UART_UBRR = (((F_CPU / (UART_Config.baud_rate * 16UL))) - 1);
 558:	80 91 60 00 	lds	r24, 0x0060
 55c:	90 91 61 00 	lds	r25, 0x0061
 560:	cc 01       	movw	r24, r24
 562:	a0 e0       	ldi	r26, 0x00	; 0
 564:	b0 e0       	ldi	r27, 0x00	; 0
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	aa 1f       	adc	r26, r26
 56c:	bb 1f       	adc	r27, r27
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	aa 1f       	adc	r26, r26
 574:	bb 1f       	adc	r27, r27
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	aa 1f       	adc	r26, r26
 57c:	bb 1f       	adc	r27, r27
 57e:	88 0f       	add	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	aa 1f       	adc	r26, r26
 584:	bb 1f       	adc	r27, r27
 586:	9c 01       	movw	r18, r24
 588:	ad 01       	movw	r20, r26
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	92 e1       	ldi	r25, 0x12	; 18
 58e:	aa e7       	ldi	r26, 0x7A	; 122
 590:	b0 e0       	ldi	r27, 0x00	; 0
 592:	bc 01       	movw	r22, r24
 594:	cd 01       	movw	r24, r26
 596:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodsi4>
 59a:	da 01       	movw	r26, r20
 59c:	c9 01       	movw	r24, r18
 59e:	01 97       	sbiw	r24, 0x01	; 1
 5a0:	9a 83       	std	Y+2, r25	; 0x02
 5a2:	89 83       	std	Y+1, r24	; 0x01
 5a4:	30 c0       	rjmp	.+96     	; 0x606 <UART_Init+0xd4>
	}
	else if(UART_Config.DoubleSpeed == UART_DoubleSpeedEn)
 5a6:	80 91 62 00 	lds	r24, 0x0062
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	51 f5       	brne	.+84     	; 0x602 <UART_Init+0xd0>
	{
		SET_BIT(UART_UCSRA,UART_U2X);
 5ae:	ab e2       	ldi	r26, 0x2B	; 43
 5b0:	b0 e0       	ldi	r27, 0x00	; 0
 5b2:	eb e2       	ldi	r30, 0x2B	; 43
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	82 60       	ori	r24, 0x02	; 2
 5ba:	8c 93       	st	X, r24
		UART_UBRR = (((F_CPU / (UART_Config.baud_rate * 8UL))) - 1);
 5bc:	80 91 60 00 	lds	r24, 0x0060
 5c0:	90 91 61 00 	lds	r25, 0x0061
 5c4:	cc 01       	movw	r24, r24
 5c6:	a0 e0       	ldi	r26, 0x00	; 0
 5c8:	b0 e0       	ldi	r27, 0x00	; 0
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	aa 1f       	adc	r26, r26
 5d0:	bb 1f       	adc	r27, r27
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	aa 1f       	adc	r26, r26
 5d8:	bb 1f       	adc	r27, r27
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	aa 1f       	adc	r26, r26
 5e0:	bb 1f       	adc	r27, r27
 5e2:	9c 01       	movw	r18, r24
 5e4:	ad 01       	movw	r20, r26
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	92 e1       	ldi	r25, 0x12	; 18
 5ea:	aa e7       	ldi	r26, 0x7A	; 122
 5ec:	b0 e0       	ldi	r27, 0x00	; 0
 5ee:	bc 01       	movw	r22, r24
 5f0:	cd 01       	movw	r24, r26
 5f2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__udivmodsi4>
 5f6:	da 01       	movw	r26, r20
 5f8:	c9 01       	movw	r24, r18
 5fa:	01 97       	sbiw	r24, 0x01	; 1
 5fc:	9a 83       	std	Y+2, r25	; 0x02
 5fe:	89 83       	std	Y+1, r24	; 0x01
 600:	02 c0       	rjmp	.+4      	; 0x606 <UART_Init+0xd4>
	}
	else
	{
		return NotOk;
 602:	1b 82       	std	Y+3, r1	; 0x03
 604:	f1 c0       	rjmp	.+482    	; 0x7e8 <UART_Init+0x2b6>
	}

	/*clear to choose UBRRH*/
	CLEAR_BIT(UART_UCSRC,UART_URSEL);
 606:	a0 e4       	ldi	r26, 0x40	; 64
 608:	b0 e0       	ldi	r27, 0x00	; 0
 60a:	e0 e4       	ldi	r30, 0x40	; 64
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	8f 77       	andi	r24, 0x7F	; 127
 612:	8c 93       	st	X, r24
	UART_UBRRL = (uint8)UART_UBRR;
 614:	e9 e2       	ldi	r30, 0x29	; 41
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	89 81       	ldd	r24, Y+1	; 0x01
 61a:	80 83       	st	Z, r24
	UART_UBRRH = (uint8)(UART_UBRR >> 8);
 61c:	e0 e4       	ldi	r30, 0x40	; 64
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	89 81       	ldd	r24, Y+1	; 0x01
 622:	9a 81       	ldd	r25, Y+2	; 0x02
 624:	89 2f       	mov	r24, r25
 626:	99 27       	eor	r25, r25
 628:	80 83       	st	Z, r24
	SET_BIT(UART_UCSRC,UART_URSEL);
 62a:	a0 e4       	ldi	r26, 0x40	; 64
 62c:	b0 e0       	ldi	r27, 0x00	; 0
 62e:	e0 e4       	ldi	r30, 0x40	; 64
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	80 81       	ld	r24, Z
 634:	80 68       	ori	r24, 0x80	; 128
 636:	8c 93       	st	X, r24
	/*set to choose UCSRC*/
	/*************************************************************************************/
	if(UART_Config.DataSize == Bit5)
 638:	80 91 66 00 	lds	r24, 0x0066
 63c:	85 30       	cpi	r24, 0x05	; 5
 63e:	b1 f4       	brne	.+44     	; 0x66c <UART_Init+0x13a>
	{
		CLEAR_BIT(UART_UCSRB,UART_UCSZ2);
 640:	aa e2       	ldi	r26, 0x2A	; 42
 642:	b0 e0       	ldi	r27, 0x00	; 0
 644:	ea e2       	ldi	r30, 0x2A	; 42
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	80 81       	ld	r24, Z
 64a:	8b 7f       	andi	r24, 0xFB	; 251
 64c:	8c 93       	st	X, r24
		CLEAR_BIT(UART_UCSRC,UART_UCSZ1);
 64e:	a0 e4       	ldi	r26, 0x40	; 64
 650:	b0 e0       	ldi	r27, 0x00	; 0
 652:	e0 e4       	ldi	r30, 0x40	; 64
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	80 81       	ld	r24, Z
 658:	8b 7f       	andi	r24, 0xFB	; 251
 65a:	8c 93       	st	X, r24
		CLEAR_BIT(UART_UCSRC,UART_UCSZ0);
 65c:	a0 e4       	ldi	r26, 0x40	; 64
 65e:	b0 e0       	ldi	r27, 0x00	; 0
 660:	e0 e4       	ldi	r30, 0x40	; 64
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	80 81       	ld	r24, Z
 666:	8d 7f       	andi	r24, 0xFD	; 253
 668:	8c 93       	st	X, r24
 66a:	6a c0       	rjmp	.+212    	; 0x740 <UART_Init+0x20e>
	}
	else if(UART_Config.DataSize == Bit6)
 66c:	80 91 66 00 	lds	r24, 0x0066
 670:	86 30       	cpi	r24, 0x06	; 6
 672:	b1 f4       	brne	.+44     	; 0x6a0 <UART_Init+0x16e>
	{
		CLEAR_BIT(UART_UCSRB,UART_UCSZ2);
 674:	aa e2       	ldi	r26, 0x2A	; 42
 676:	b0 e0       	ldi	r27, 0x00	; 0
 678:	ea e2       	ldi	r30, 0x2A	; 42
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	80 81       	ld	r24, Z
 67e:	8b 7f       	andi	r24, 0xFB	; 251
 680:	8c 93       	st	X, r24
		CLEAR_BIT(UART_UCSRC,UART_UCSZ1);
 682:	a0 e4       	ldi	r26, 0x40	; 64
 684:	b0 e0       	ldi	r27, 0x00	; 0
 686:	e0 e4       	ldi	r30, 0x40	; 64
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	80 81       	ld	r24, Z
 68c:	8b 7f       	andi	r24, 0xFB	; 251
 68e:	8c 93       	st	X, r24
		SET_BIT(UART_UCSRC,UART_UCSZ0);
 690:	a0 e4       	ldi	r26, 0x40	; 64
 692:	b0 e0       	ldi	r27, 0x00	; 0
 694:	e0 e4       	ldi	r30, 0x40	; 64
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	80 81       	ld	r24, Z
 69a:	82 60       	ori	r24, 0x02	; 2
 69c:	8c 93       	st	X, r24
 69e:	50 c0       	rjmp	.+160    	; 0x740 <UART_Init+0x20e>
	}
	else if(UART_Config.DataSize == Bit7)
 6a0:	80 91 66 00 	lds	r24, 0x0066
 6a4:	87 30       	cpi	r24, 0x07	; 7
 6a6:	b1 f4       	brne	.+44     	; 0x6d4 <UART_Init+0x1a2>
	{
		CLEAR_BIT(UART_UCSRB,UART_UCSZ2);
 6a8:	aa e2       	ldi	r26, 0x2A	; 42
 6aa:	b0 e0       	ldi	r27, 0x00	; 0
 6ac:	ea e2       	ldi	r30, 0x2A	; 42
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	80 81       	ld	r24, Z
 6b2:	8b 7f       	andi	r24, 0xFB	; 251
 6b4:	8c 93       	st	X, r24
		SET_BIT(UART_UCSRC,UART_UCSZ1);
 6b6:	a0 e4       	ldi	r26, 0x40	; 64
 6b8:	b0 e0       	ldi	r27, 0x00	; 0
 6ba:	e0 e4       	ldi	r30, 0x40	; 64
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	84 60       	ori	r24, 0x04	; 4
 6c2:	8c 93       	st	X, r24
		CLEAR_BIT(UART_UCSRC,UART_UCSZ0);
 6c4:	a0 e4       	ldi	r26, 0x40	; 64
 6c6:	b0 e0       	ldi	r27, 0x00	; 0
 6c8:	e0 e4       	ldi	r30, 0x40	; 64
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	80 81       	ld	r24, Z
 6ce:	8d 7f       	andi	r24, 0xFD	; 253
 6d0:	8c 93       	st	X, r24
 6d2:	36 c0       	rjmp	.+108    	; 0x740 <UART_Init+0x20e>
	}
	else if(UART_Config.DataSize == Bit8)
 6d4:	80 91 66 00 	lds	r24, 0x0066
 6d8:	88 30       	cpi	r24, 0x08	; 8
 6da:	b1 f4       	brne	.+44     	; 0x708 <UART_Init+0x1d6>
	{
		CLEAR_BIT(UART_UCSRB,UART_UCSZ2);
 6dc:	aa e2       	ldi	r26, 0x2A	; 42
 6de:	b0 e0       	ldi	r27, 0x00	; 0
 6e0:	ea e2       	ldi	r30, 0x2A	; 42
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	80 81       	ld	r24, Z
 6e6:	8b 7f       	andi	r24, 0xFB	; 251
 6e8:	8c 93       	st	X, r24
		SET_BIT(UART_UCSRC,UART_UCSZ1);
 6ea:	a0 e4       	ldi	r26, 0x40	; 64
 6ec:	b0 e0       	ldi	r27, 0x00	; 0
 6ee:	e0 e4       	ldi	r30, 0x40	; 64
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	84 60       	ori	r24, 0x04	; 4
 6f6:	8c 93       	st	X, r24
		SET_BIT(UART_UCSRC,UART_UCSZ0);
 6f8:	a0 e4       	ldi	r26, 0x40	; 64
 6fa:	b0 e0       	ldi	r27, 0x00	; 0
 6fc:	e0 e4       	ldi	r30, 0x40	; 64
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	80 81       	ld	r24, Z
 702:	82 60       	ori	r24, 0x02	; 2
 704:	8c 93       	st	X, r24
 706:	1c c0       	rjmp	.+56     	; 0x740 <UART_Init+0x20e>
	}
	else if(UART_Config.DataSize == Bit9)
 708:	80 91 66 00 	lds	r24, 0x0066
 70c:	89 30       	cpi	r24, 0x09	; 9
 70e:	b1 f4       	brne	.+44     	; 0x73c <UART_Init+0x20a>
	{
		SET_BIT(UART_UCSRB,UART_UCSZ2);
 710:	aa e2       	ldi	r26, 0x2A	; 42
 712:	b0 e0       	ldi	r27, 0x00	; 0
 714:	ea e2       	ldi	r30, 0x2A	; 42
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	80 81       	ld	r24, Z
 71a:	84 60       	ori	r24, 0x04	; 4
 71c:	8c 93       	st	X, r24
		SET_BIT(UART_UCSRC,UART_UCSZ1);
 71e:	a0 e4       	ldi	r26, 0x40	; 64
 720:	b0 e0       	ldi	r27, 0x00	; 0
 722:	e0 e4       	ldi	r30, 0x40	; 64
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	80 81       	ld	r24, Z
 728:	84 60       	ori	r24, 0x04	; 4
 72a:	8c 93       	st	X, r24
		SET_BIT(UART_UCSRC,UART_UCSZ0);
 72c:	a0 e4       	ldi	r26, 0x40	; 64
 72e:	b0 e0       	ldi	r27, 0x00	; 0
 730:	e0 e4       	ldi	r30, 0x40	; 64
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	80 81       	ld	r24, Z
 736:	82 60       	ori	r24, 0x02	; 2
 738:	8c 93       	st	X, r24
 73a:	02 c0       	rjmp	.+4      	; 0x740 <UART_Init+0x20e>
	}
	else
	{
		return NotOk;
 73c:	1b 82       	std	Y+3, r1	; 0x03
 73e:	54 c0       	rjmp	.+168    	; 0x7e8 <UART_Init+0x2b6>
	}

	/*********************************************************************************/
	if(UART_Config.Parity == UART_ParityDisabled)
 740:	80 91 67 00 	lds	r24, 0x0067
 744:	88 23       	and	r24, r24
 746:	79 f4       	brne	.+30     	; 0x766 <UART_Init+0x234>
	{
		CLEAR_BIT(UART_UCSRC,UART_UPM0);
 748:	a0 e4       	ldi	r26, 0x40	; 64
 74a:	b0 e0       	ldi	r27, 0x00	; 0
 74c:	e0 e4       	ldi	r30, 0x40	; 64
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
 752:	8f 7e       	andi	r24, 0xEF	; 239
 754:	8c 93       	st	X, r24
		CLEAR_BIT(UART_UCSRC,UART_UPM1);
 756:	a0 e4       	ldi	r26, 0x40	; 64
 758:	b0 e0       	ldi	r27, 0x00	; 0
 75a:	e0 e4       	ldi	r30, 0x40	; 64
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	80 81       	ld	r24, Z
 760:	8f 7d       	andi	r24, 0xDF	; 223
 762:	8c 93       	st	X, r24
 764:	28 c0       	rjmp	.+80     	; 0x7b6 <UART_Init+0x284>
	}
	else if(UART_Config.Parity == UART_ParityOdd)
 766:	80 91 67 00 	lds	r24, 0x0067
 76a:	81 30       	cpi	r24, 0x01	; 1
 76c:	79 f4       	brne	.+30     	; 0x78c <UART_Init+0x25a>
	{
		SET_BIT(UART_UCSRC,UART_UPM0);
 76e:	a0 e4       	ldi	r26, 0x40	; 64
 770:	b0 e0       	ldi	r27, 0x00	; 0
 772:	e0 e4       	ldi	r30, 0x40	; 64
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	80 81       	ld	r24, Z
 778:	80 61       	ori	r24, 0x10	; 16
 77a:	8c 93       	st	X, r24
		SET_BIT(UART_UCSRC,UART_UPM1);
 77c:	a0 e4       	ldi	r26, 0x40	; 64
 77e:	b0 e0       	ldi	r27, 0x00	; 0
 780:	e0 e4       	ldi	r30, 0x40	; 64
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	80 81       	ld	r24, Z
 786:	80 62       	ori	r24, 0x20	; 32
 788:	8c 93       	st	X, r24
 78a:	15 c0       	rjmp	.+42     	; 0x7b6 <UART_Init+0x284>
	}
	else if(UART_Config.Parity == UART_ParityEven)
 78c:	80 91 67 00 	lds	r24, 0x0067
 790:	82 30       	cpi	r24, 0x02	; 2
 792:	79 f4       	brne	.+30     	; 0x7b2 <UART_Init+0x280>
	{
		CLEAR_BIT(UART_UCSRC,UART_UPM0);
 794:	a0 e4       	ldi	r26, 0x40	; 64
 796:	b0 e0       	ldi	r27, 0x00	; 0
 798:	e0 e4       	ldi	r30, 0x40	; 64
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	80 81       	ld	r24, Z
 79e:	8f 7e       	andi	r24, 0xEF	; 239
 7a0:	8c 93       	st	X, r24
		SET_BIT(UART_UCSRC,UART_UPM1);
 7a2:	a0 e4       	ldi	r26, 0x40	; 64
 7a4:	b0 e0       	ldi	r27, 0x00	; 0
 7a6:	e0 e4       	ldi	r30, 0x40	; 64
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	80 81       	ld	r24, Z
 7ac:	80 62       	ori	r24, 0x20	; 32
 7ae:	8c 93       	st	X, r24
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <UART_Init+0x284>
	}
	else
	{
		return NotOk;
 7b2:	1b 82       	std	Y+3, r1	; 0x03
 7b4:	19 c0       	rjmp	.+50     	; 0x7e8 <UART_Init+0x2b6>
	}

	/*****************************************************************************/
	if(UART_Config.StopBits == UART_StopBit1)
 7b6:	80 91 68 00 	lds	r24, 0x0068
 7ba:	81 30       	cpi	r24, 0x01	; 1
 7bc:	41 f4       	brne	.+16     	; 0x7ce <UART_Init+0x29c>
	{
		CLEAR_BIT(UART_UCSRC,UART_USBS);
 7be:	a0 e4       	ldi	r26, 0x40	; 64
 7c0:	b0 e0       	ldi	r27, 0x00	; 0
 7c2:	e0 e4       	ldi	r30, 0x40	; 64
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	80 81       	ld	r24, Z
 7c8:	87 7f       	andi	r24, 0xF7	; 247
 7ca:	8c 93       	st	X, r24
 7cc:	0b c0       	rjmp	.+22     	; 0x7e4 <UART_Init+0x2b2>
	}
	else if(UART_Config.StopBits == UART_StopBit2)
 7ce:	80 91 68 00 	lds	r24, 0x0068
 7d2:	82 30       	cpi	r24, 0x02	; 2
 7d4:	39 f4       	brne	.+14     	; 0x7e4 <UART_Init+0x2b2>
	{
		SET_BIT(UART_UCSRC,UART_USBS);
 7d6:	a0 e4       	ldi	r26, 0x40	; 64
 7d8:	b0 e0       	ldi	r27, 0x00	; 0
 7da:	e0 e4       	ldi	r30, 0x40	; 64
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	80 81       	ld	r24, Z
 7e0:	88 60       	ori	r24, 0x08	; 8
 7e2:	8c 93       	st	X, r24
	}
	return Ok;
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	8b 83       	std	Y+3, r24	; 0x03
 7e8:	8b 81       	ldd	r24, Y+3	; 0x03
}
 7ea:	0f 90       	pop	r0
 7ec:	0f 90       	pop	r0
 7ee:	0f 90       	pop	r0
 7f0:	cf 91       	pop	r28
 7f2:	df 91       	pop	r29
 7f4:	08 95       	ret

000007f6 <UART_SendChar>:
 * Outputs:			NULL
 *
 * Return:			Status to check function execution
 *******************************************************************************/
Status UART_SendChar(const uint8 a_data)
{
 7f6:	df 93       	push	r29
 7f8:	cf 93       	push	r28
 7fa:	00 d0       	rcall	.+0      	; 0x7fc <UART_SendChar+0x6>
 7fc:	cd b7       	in	r28, 0x3d	; 61
 7fe:	de b7       	in	r29, 0x3e	; 62
 800:	89 83       	std	Y+1, r24	; 0x01

	if(UART_Config.Udr  == UART_UdrDisabled)
 802:	80 91 65 00 	lds	r24, 0x0065
 806:	88 23       	and	r24, r24
 808:	81 f4       	brne	.+32     	; 0x82a <UART_SendChar+0x34>
	{
		/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
		 * transmitting a new byte so wait until this flag is set to one */

		while(IS_BIT_CLEAR(UART_UCSRA,UART_UDRE)){}
 80a:	eb e2       	ldi	r30, 0x2B	; 43
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	80 81       	ld	r24, Z
 810:	88 2f       	mov	r24, r24
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	80 72       	andi	r24, 0x20	; 32
 816:	90 70       	andi	r25, 0x00	; 0
 818:	00 97       	sbiw	r24, 0x00	; 0
 81a:	b9 f3       	breq	.-18     	; 0x80a <UART_SendChar+0x14>

		/* Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now */

		UART_UDR = a_data;
 81c:	ec e2       	ldi	r30, 0x2C	; 44
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	89 81       	ldd	r24, Y+1	; 0x01
 822:	80 83       	st	Z, r24
		return Ok;
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	8a 83       	std	Y+2, r24	; 0x02
 828:	0b c0       	rjmp	.+22     	; 0x840 <UART_SendChar+0x4a>
	}
	else if(UART_Config.Udr == UART_UdrEn)
 82a:	80 91 65 00 	lds	r24, 0x0065
 82e:	81 30       	cpi	r24, 0x01	; 1
 830:	31 f4       	brne	.+12     	; 0x83e <UART_SendChar+0x48>
	{
		g_flag = a_data;
 832:	89 81       	ldd	r24, Y+1	; 0x01
 834:	80 93 6a 00 	sts	0x006A, r24
	}
	else
	{
		return NotOk;
	}
	return Ok;
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	8a 83       	std	Y+2, r24	; 0x02
 83c:	01 c0       	rjmp	.+2      	; 0x840 <UART_SendChar+0x4a>
	{
		g_flag = a_data;
	}
	else
	{
		return NotOk;
 83e:	1a 82       	std	Y+2, r1	; 0x02
 840:	8a 81       	ldd	r24, Y+2	; 0x02
	}
	return Ok;
}
 842:	0f 90       	pop	r0
 844:	0f 90       	pop	r0
 846:	cf 91       	pop	r28
 848:	df 91       	pop	r29
 84a:	08 95       	ret

0000084c <UART_Send>:
 * Outputs:			NULL
 *
 * Return:			Status to check function execution
 *******************************************************************************/
Status UART_Send(const uint8 * a_data_ptr)
{
 84c:	df 93       	push	r29
 84e:	cf 93       	push	r28
 850:	00 d0       	rcall	.+0      	; 0x852 <UART_Send+0x6>
 852:	00 d0       	rcall	.+0      	; 0x854 <UART_Send+0x8>
 854:	cd b7       	in	r28, 0x3d	; 61
 856:	de b7       	in	r29, 0x3e	; 62
 858:	9b 83       	std	Y+3, r25	; 0x03
 85a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 index = LOW;
 85c:	19 82       	std	Y+1, r1	; 0x01
	if(UART_Config.Udr  == UART_UdrDisabled)
 85e:	80 91 65 00 	lds	r24, 0x0065
 862:	88 23       	and	r24, r24
 864:	d9 f4       	brne	.+54     	; 0x89c <__stack+0x3d>
 866:	0e c0       	rjmp	.+28     	; 0x884 <__stack+0x25>
	{
		while(a_data_ptr[index] != '\0')
		{
			UART_SendChar(a_data_ptr[index]);
 868:	89 81       	ldd	r24, Y+1	; 0x01
 86a:	28 2f       	mov	r18, r24
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	8a 81       	ldd	r24, Y+2	; 0x02
 870:	9b 81       	ldd	r25, Y+3	; 0x03
 872:	fc 01       	movw	r30, r24
 874:	e2 0f       	add	r30, r18
 876:	f3 1f       	adc	r31, r19
 878:	80 81       	ld	r24, Z
 87a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <UART_SendChar>
			index++;
 87e:	89 81       	ldd	r24, Y+1	; 0x01
 880:	8f 5f       	subi	r24, 0xFF	; 255
 882:	89 83       	std	Y+1, r24	; 0x01
Status UART_Send(const uint8 * a_data_ptr)
{
	uint8 index = LOW;
	if(UART_Config.Udr  == UART_UdrDisabled)
	{
		while(a_data_ptr[index] != '\0')
 884:	89 81       	ldd	r24, Y+1	; 0x01
 886:	28 2f       	mov	r18, r24
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	8a 81       	ldd	r24, Y+2	; 0x02
 88c:	9b 81       	ldd	r25, Y+3	; 0x03
 88e:	fc 01       	movw	r30, r24
 890:	e2 0f       	add	r30, r18
 892:	f3 1f       	adc	r31, r19
 894:	80 81       	ld	r24, Z
 896:	88 23       	and	r24, r24
 898:	39 f7       	brne	.-50     	; 0x868 <__stack+0x9>
 89a:	22 c0       	rjmp	.+68     	; 0x8e0 <__stack+0x81>
		{
			UART_SendChar(a_data_ptr[index]);
			index++;
		}
	}
	else if(UART_Config.Udr == UART_UdrEn)
 89c:	80 91 65 00 	lds	r24, 0x0065
 8a0:	81 30       	cpi	r24, 0x01	; 1
 8a2:	e1 f4       	brne	.+56     	; 0x8dc <__stack+0x7d>
	{
		g_index = LOW;
 8a4:	10 92 6b 00 	sts	0x006B, r1
 8a8:	0c c0       	rjmp	.+24     	; 0x8c2 <__stack+0x63>
		while(a_data_ptr[g_index] != '\0')
		{
			UART_SendChar(a_data_ptr[g_index]);
 8aa:	80 91 6b 00 	lds	r24, 0x006B
 8ae:	28 2f       	mov	r18, r24
 8b0:	30 e0       	ldi	r19, 0x00	; 0
 8b2:	8a 81       	ldd	r24, Y+2	; 0x02
 8b4:	9b 81       	ldd	r25, Y+3	; 0x03
 8b6:	fc 01       	movw	r30, r24
 8b8:	e2 0f       	add	r30, r18
 8ba:	f3 1f       	adc	r31, r19
 8bc:	80 81       	ld	r24, Z
 8be:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <UART_SendChar>
		}
	}
	else if(UART_Config.Udr == UART_UdrEn)
	{
		g_index = LOW;
		while(a_data_ptr[g_index] != '\0')
 8c2:	80 91 6b 00 	lds	r24, 0x006B
 8c6:	28 2f       	mov	r18, r24
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	8a 81       	ldd	r24, Y+2	; 0x02
 8cc:	9b 81       	ldd	r25, Y+3	; 0x03
 8ce:	fc 01       	movw	r30, r24
 8d0:	e2 0f       	add	r30, r18
 8d2:	f3 1f       	adc	r31, r19
 8d4:	80 81       	ld	r24, Z
 8d6:	88 23       	and	r24, r24
 8d8:	41 f7       	brne	.-48     	; 0x8aa <__stack+0x4b>
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <__stack+0x81>
			UART_SendChar(a_data_ptr[g_index]);
		}
	}
	else
	{
		return NotOk;
 8dc:	1c 82       	std	Y+4, r1	; 0x04
 8de:	02 c0       	rjmp	.+4      	; 0x8e4 <__stack+0x85>
	}

	return Ok;
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	8c 83       	std	Y+4, r24	; 0x04
 8e4:	8c 81       	ldd	r24, Y+4	; 0x04
}
 8e6:	0f 90       	pop	r0
 8e8:	0f 90       	pop	r0
 8ea:	0f 90       	pop	r0
 8ec:	0f 90       	pop	r0
 8ee:	cf 91       	pop	r28
 8f0:	df 91       	pop	r29
 8f2:	08 95       	ret

000008f4 <UART_Start>:
 * Outputs:		NULL
 *
 * Return:			Status to check function execution
 *******************************************************************************/
Status UART_Start(void)
{
 8f4:	df 93       	push	r29
 8f6:	cf 93       	push	r28
 8f8:	0f 92       	push	r0
 8fa:	cd b7       	in	r28, 0x3d	; 61
 8fc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UART_UCSRB,UART_TXEN);
 8fe:	aa e2       	ldi	r26, 0x2A	; 42
 900:	b0 e0       	ldi	r27, 0x00	; 0
 902:	ea e2       	ldi	r30, 0x2A	; 42
 904:	f0 e0       	ldi	r31, 0x00	; 0
 906:	80 81       	ld	r24, Z
 908:	88 60       	ori	r24, 0x08	; 8
 90a:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRB,UART_RXEN);
 90c:	aa e2       	ldi	r26, 0x2A	; 42
 90e:	b0 e0       	ldi	r27, 0x00	; 0
 910:	ea e2       	ldi	r30, 0x2A	; 42
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	80 81       	ld	r24, Z
 916:	80 61       	ori	r24, 0x10	; 16
 918:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRB,UART_UDRIE);
 91a:	aa e2       	ldi	r26, 0x2A	; 42
 91c:	b0 e0       	ldi	r27, 0x00	; 0
 91e:	ea e2       	ldi	r30, 0x2A	; 42
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	80 81       	ld	r24, Z
 924:	80 62       	ori	r24, 0x20	; 32
 926:	8c 93       	st	X, r24

	if(UART_Config.TxInt  == UART_TxIntDisabled)
 928:	80 91 63 00 	lds	r24, 0x0063
 92c:	88 23       	and	r24, r24
 92e:	79 f4       	brne	.+30     	; 0x94e <UART_Start+0x5a>
	{
		CLEAR_BIT(UART_UCSRB,UART_TXCIE);
 930:	aa e2       	ldi	r26, 0x2A	; 42
 932:	b0 e0       	ldi	r27, 0x00	; 0
 934:	ea e2       	ldi	r30, 0x2A	; 42
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	80 81       	ld	r24, Z
 93a:	8f 7b       	andi	r24, 0xBF	; 191
 93c:	8c 93       	st	X, r24
		CLEAR_BIT(SREG,7);
 93e:	af e5       	ldi	r26, 0x5F	; 95
 940:	b0 e0       	ldi	r27, 0x00	; 0
 942:	ef e5       	ldi	r30, 0x5F	; 95
 944:	f0 e0       	ldi	r31, 0x00	; 0
 946:	80 81       	ld	r24, Z
 948:	8f 77       	andi	r24, 0x7F	; 127
 94a:	8c 93       	st	X, r24
 94c:	15 c0       	rjmp	.+42     	; 0x978 <UART_Start+0x84>
	}
	else if(UART_Config.TxInt  == UART_TxIntEn)
 94e:	80 91 63 00 	lds	r24, 0x0063
 952:	81 30       	cpi	r24, 0x01	; 1
 954:	79 f4       	brne	.+30     	; 0x974 <UART_Start+0x80>
	{
		SET_BIT(UART_UCSRB,UART_TXCIE);
 956:	aa e2       	ldi	r26, 0x2A	; 42
 958:	b0 e0       	ldi	r27, 0x00	; 0
 95a:	ea e2       	ldi	r30, 0x2A	; 42
 95c:	f0 e0       	ldi	r31, 0x00	; 0
 95e:	80 81       	ld	r24, Z
 960:	80 64       	ori	r24, 0x40	; 64
 962:	8c 93       	st	X, r24
		SET_BIT(SREG,7);
 964:	af e5       	ldi	r26, 0x5F	; 95
 966:	b0 e0       	ldi	r27, 0x00	; 0
 968:	ef e5       	ldi	r30, 0x5F	; 95
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	80 81       	ld	r24, Z
 96e:	80 68       	ori	r24, 0x80	; 128
 970:	8c 93       	st	X, r24
 972:	02 c0       	rjmp	.+4      	; 0x978 <UART_Start+0x84>
	}
	else
	{
		return NotOk;
 974:	19 82       	std	Y+1, r1	; 0x01
 976:	52 c0       	rjmp	.+164    	; 0xa1c <UART_Start+0x128>
	}

	if(UART_Config.Udr == UART_UdrDisabled)
 978:	80 91 65 00 	lds	r24, 0x0065
 97c:	88 23       	and	r24, r24
 97e:	79 f4       	brne	.+30     	; 0x99e <UART_Start+0xaa>
	{
		CLEAR_BIT(UART_UCSRB,UART_UDRIE);
 980:	aa e2       	ldi	r26, 0x2A	; 42
 982:	b0 e0       	ldi	r27, 0x00	; 0
 984:	ea e2       	ldi	r30, 0x2A	; 42
 986:	f0 e0       	ldi	r31, 0x00	; 0
 988:	80 81       	ld	r24, Z
 98a:	8f 7d       	andi	r24, 0xDF	; 223
 98c:	8c 93       	st	X, r24
		CLEAR_BIT(SREG,7);
 98e:	af e5       	ldi	r26, 0x5F	; 95
 990:	b0 e0       	ldi	r27, 0x00	; 0
 992:	ef e5       	ldi	r30, 0x5F	; 95
 994:	f0 e0       	ldi	r31, 0x00	; 0
 996:	80 81       	ld	r24, Z
 998:	8f 77       	andi	r24, 0x7F	; 127
 99a:	8c 93       	st	X, r24
 99c:	15 c0       	rjmp	.+42     	; 0x9c8 <UART_Start+0xd4>
	}
	else if(UART_Config.Udr  == UART_UdrEn)
 99e:	80 91 65 00 	lds	r24, 0x0065
 9a2:	81 30       	cpi	r24, 0x01	; 1
 9a4:	79 f4       	brne	.+30     	; 0x9c4 <UART_Start+0xd0>
	{
		SET_BIT(UART_UCSRB,UART_UDRIE);
 9a6:	aa e2       	ldi	r26, 0x2A	; 42
 9a8:	b0 e0       	ldi	r27, 0x00	; 0
 9aa:	ea e2       	ldi	r30, 0x2A	; 42
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	80 81       	ld	r24, Z
 9b0:	80 62       	ori	r24, 0x20	; 32
 9b2:	8c 93       	st	X, r24
		SET_BIT(SREG,7);
 9b4:	af e5       	ldi	r26, 0x5F	; 95
 9b6:	b0 e0       	ldi	r27, 0x00	; 0
 9b8:	ef e5       	ldi	r30, 0x5F	; 95
 9ba:	f0 e0       	ldi	r31, 0x00	; 0
 9bc:	80 81       	ld	r24, Z
 9be:	80 68       	ori	r24, 0x80	; 128
 9c0:	8c 93       	st	X, r24
 9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <UART_Start+0xd4>
	}
	else
	{
		return NotOk;
 9c4:	19 82       	std	Y+1, r1	; 0x01
 9c6:	2a c0       	rjmp	.+84     	; 0xa1c <UART_Start+0x128>
	}

	if(UART_Config.RxInt  == UART_RxIntDisabled)
 9c8:	80 91 64 00 	lds	r24, 0x0064
 9cc:	88 23       	and	r24, r24
 9ce:	79 f4       	brne	.+30     	; 0x9ee <UART_Start+0xfa>
	{
		CLEAR_BIT(UART_UCSRB,UART_RXCIE);
 9d0:	aa e2       	ldi	r26, 0x2A	; 42
 9d2:	b0 e0       	ldi	r27, 0x00	; 0
 9d4:	ea e2       	ldi	r30, 0x2A	; 42
 9d6:	f0 e0       	ldi	r31, 0x00	; 0
 9d8:	80 81       	ld	r24, Z
 9da:	8f 77       	andi	r24, 0x7F	; 127
 9dc:	8c 93       	st	X, r24
		CLEAR_BIT(SREG,7);
 9de:	af e5       	ldi	r26, 0x5F	; 95
 9e0:	b0 e0       	ldi	r27, 0x00	; 0
 9e2:	ef e5       	ldi	r30, 0x5F	; 95
 9e4:	f0 e0       	ldi	r31, 0x00	; 0
 9e6:	80 81       	ld	r24, Z
 9e8:	8f 77       	andi	r24, 0x7F	; 127
 9ea:	8c 93       	st	X, r24
 9ec:	15 c0       	rjmp	.+42     	; 0xa18 <UART_Start+0x124>
	}
	else if(UART_Config.RxInt  == UART_RxIntEn)
 9ee:	80 91 64 00 	lds	r24, 0x0064
 9f2:	81 30       	cpi	r24, 0x01	; 1
 9f4:	79 f4       	brne	.+30     	; 0xa14 <UART_Start+0x120>
	{
		SET_BIT(UART_UCSRB,UART_RXCIE);
 9f6:	aa e2       	ldi	r26, 0x2A	; 42
 9f8:	b0 e0       	ldi	r27, 0x00	; 0
 9fa:	ea e2       	ldi	r30, 0x2A	; 42
 9fc:	f0 e0       	ldi	r31, 0x00	; 0
 9fe:	80 81       	ld	r24, Z
 a00:	80 68       	ori	r24, 0x80	; 128
 a02:	8c 93       	st	X, r24
		SET_BIT(SREG,7);
 a04:	af e5       	ldi	r26, 0x5F	; 95
 a06:	b0 e0       	ldi	r27, 0x00	; 0
 a08:	ef e5       	ldi	r30, 0x5F	; 95
 a0a:	f0 e0       	ldi	r31, 0x00	; 0
 a0c:	80 81       	ld	r24, Z
 a0e:	80 68       	ori	r24, 0x80	; 128
 a10:	8c 93       	st	X, r24
 a12:	02 c0       	rjmp	.+4      	; 0xa18 <UART_Start+0x124>
	}
	else
	{
		return NotOk;
 a14:	19 82       	std	Y+1, r1	; 0x01
 a16:	02 c0       	rjmp	.+4      	; 0xa1c <UART_Start+0x128>
	}
	return Ok;
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	89 83       	std	Y+1, r24	; 0x01
 a1c:	89 81       	ldd	r24, Y+1	; 0x01
}
 a1e:	0f 90       	pop	r0
 a20:	cf 91       	pop	r28
 a22:	df 91       	pop	r29
 a24:	08 95       	ret

00000a26 <UART_Stop>:
 * Outputs:			NULL
 *
 * Return:			Status to check function execution
 *******************************************************************************/
Status UART_Stop(void)
{
 a26:	df 93       	push	r29
 a28:	cf 93       	push	r28
 a2a:	cd b7       	in	r28, 0x3d	; 61
 a2c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UART_UCSRB,UART_TXEN);
 a2e:	aa e2       	ldi	r26, 0x2A	; 42
 a30:	b0 e0       	ldi	r27, 0x00	; 0
 a32:	ea e2       	ldi	r30, 0x2A	; 42
 a34:	f0 e0       	ldi	r31, 0x00	; 0
 a36:	80 81       	ld	r24, Z
 a38:	87 7f       	andi	r24, 0xF7	; 247
 a3a:	8c 93       	st	X, r24
	CLEAR_BIT(UART_UCSRB,UART_RXEN);
 a3c:	aa e2       	ldi	r26, 0x2A	; 42
 a3e:	b0 e0       	ldi	r27, 0x00	; 0
 a40:	ea e2       	ldi	r30, 0x2A	; 42
 a42:	f0 e0       	ldi	r31, 0x00	; 0
 a44:	80 81       	ld	r24, Z
 a46:	8f 7e       	andi	r24, 0xEF	; 239
 a48:	8c 93       	st	X, r24
	CLEAR_BIT(UART_UCSRB,UART_UDRIE);
 a4a:	aa e2       	ldi	r26, 0x2A	; 42
 a4c:	b0 e0       	ldi	r27, 0x00	; 0
 a4e:	ea e2       	ldi	r30, 0x2A	; 42
 a50:	f0 e0       	ldi	r31, 0x00	; 0
 a52:	80 81       	ld	r24, Z
 a54:	8f 7d       	andi	r24, 0xDF	; 223
 a56:	8c 93       	st	X, r24
	CLEAR_BIT(UART_UCSRB,UART_TXCIE);
 a58:	aa e2       	ldi	r26, 0x2A	; 42
 a5a:	b0 e0       	ldi	r27, 0x00	; 0
 a5c:	ea e2       	ldi	r30, 0x2A	; 42
 a5e:	f0 e0       	ldi	r31, 0x00	; 0
 a60:	80 81       	ld	r24, Z
 a62:	8f 7b       	andi	r24, 0xBF	; 191
 a64:	8c 93       	st	X, r24
	CLEAR_BIT(UART_UCSRB,UART_RXCIE);
 a66:	aa e2       	ldi	r26, 0x2A	; 42
 a68:	b0 e0       	ldi	r27, 0x00	; 0
 a6a:	ea e2       	ldi	r30, 0x2A	; 42
 a6c:	f0 e0       	ldi	r31, 0x00	; 0
 a6e:	80 81       	ld	r24, Z
 a70:	8f 77       	andi	r24, 0x7F	; 127
 a72:	8c 93       	st	X, r24

	return Ok;
 a74:	81 e0       	ldi	r24, 0x01	; 1
}
 a76:	cf 91       	pop	r28
 a78:	df 91       	pop	r29
 a7a:	08 95       	ret

00000a7c <__udivmodsi4>:
 a7c:	a1 e2       	ldi	r26, 0x21	; 33
 a7e:	1a 2e       	mov	r1, r26
 a80:	aa 1b       	sub	r26, r26
 a82:	bb 1b       	sub	r27, r27
 a84:	fd 01       	movw	r30, r26
 a86:	0d c0       	rjmp	.+26     	; 0xaa2 <__udivmodsi4_ep>

00000a88 <__udivmodsi4_loop>:
 a88:	aa 1f       	adc	r26, r26
 a8a:	bb 1f       	adc	r27, r27
 a8c:	ee 1f       	adc	r30, r30
 a8e:	ff 1f       	adc	r31, r31
 a90:	a2 17       	cp	r26, r18
 a92:	b3 07       	cpc	r27, r19
 a94:	e4 07       	cpc	r30, r20
 a96:	f5 07       	cpc	r31, r21
 a98:	20 f0       	brcs	.+8      	; 0xaa2 <__udivmodsi4_ep>
 a9a:	a2 1b       	sub	r26, r18
 a9c:	b3 0b       	sbc	r27, r19
 a9e:	e4 0b       	sbc	r30, r20
 aa0:	f5 0b       	sbc	r31, r21

00000aa2 <__udivmodsi4_ep>:
 aa2:	66 1f       	adc	r22, r22
 aa4:	77 1f       	adc	r23, r23
 aa6:	88 1f       	adc	r24, r24
 aa8:	99 1f       	adc	r25, r25
 aaa:	1a 94       	dec	r1
 aac:	69 f7       	brne	.-38     	; 0xa88 <__udivmodsi4_loop>
 aae:	60 95       	com	r22
 ab0:	70 95       	com	r23
 ab2:	80 95       	com	r24
 ab4:	90 95       	com	r25
 ab6:	9b 01       	movw	r18, r22
 ab8:	ac 01       	movw	r20, r24
 aba:	bd 01       	movw	r22, r26
 abc:	cf 01       	movw	r24, r30
 abe:	08 95       	ret

00000ac0 <_exit>:
 ac0:	f8 94       	cli

00000ac2 <__stop_program>:
 ac2:	ff cf       	rjmp	.-2      	; 0xac2 <__stop_program>
