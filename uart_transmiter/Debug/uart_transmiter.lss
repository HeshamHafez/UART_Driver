
uart_transmiter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000900  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000900  00000974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c3c  00000000  00000000  00000988  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000747  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
 */

#include"uart.h"

int main(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2e 97       	sbiw	r28, 0x0e	; 14
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	UART_cfg UART_Config = {9600,UART_DoubleSpeedEn,UART_TxIntDisabled,UART_RxIntDisabled,UART_UdrDisabled,Bit8,UART_ParityDisabled,UART_StopBit1};
  96:	ce 01       	movw	r24, r28
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	9b 87       	std	Y+11, r25	; 0x0b
  9c:	8a 87       	std	Y+10, r24	; 0x0a
  9e:	e9 e6       	ldi	r30, 0x69	; 105
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	fd 87       	std	Y+13, r31	; 0x0d
  a4:	ec 87       	std	Y+12, r30	; 0x0c
  a6:	f9 e0       	ldi	r31, 0x09	; 9
  a8:	fe 87       	std	Y+14, r31	; 0x0e
  aa:	ec 85       	ldd	r30, Y+12	; 0x0c
  ac:	fd 85       	ldd	r31, Y+13	; 0x0d
  ae:	00 80       	ld	r0, Z
  b0:	8c 85       	ldd	r24, Y+12	; 0x0c
  b2:	9d 85       	ldd	r25, Y+13	; 0x0d
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	9d 87       	std	Y+13, r25	; 0x0d
  b8:	8c 87       	std	Y+12, r24	; 0x0c
  ba:	ea 85       	ldd	r30, Y+10	; 0x0a
  bc:	fb 85       	ldd	r31, Y+11	; 0x0b
  be:	00 82       	st	Z, r0
  c0:	8a 85       	ldd	r24, Y+10	; 0x0a
  c2:	9b 85       	ldd	r25, Y+11	; 0x0b
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	9b 87       	std	Y+11, r25	; 0x0b
  c8:	8a 87       	std	Y+10, r24	; 0x0a
  ca:	9e 85       	ldd	r25, Y+14	; 0x0e
  cc:	91 50       	subi	r25, 0x01	; 1
  ce:	9e 87       	std	Y+14, r25	; 0x0e
  d0:	ee 85       	ldd	r30, Y+14	; 0x0e
  d2:	ee 23       	and	r30, r30
  d4:	51 f7       	brne	.-44     	; 0xaa <main+0x28>
	UART_Init(&UART_Config);
  d6:	ce 01       	movw	r24, r28
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	0e 94 95 02 	call	0x52a	; 0x52a <UART_Init>
  de:	ff cf       	rjmp	.-2      	; 0xde <main+0x5c>

000000e0 <DIO_WritePin>:
 */

#include"reg_file.h"

void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
  e0:	df 93       	push	r29
  e2:	cf 93       	push	r28
  e4:	00 d0       	rcall	.+0      	; 0xe6 <DIO_WritePin+0x6>
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	89 83       	std	Y+1, r24	; 0x01
  ec:	6a 83       	std	Y+2, r22	; 0x02
	if((PinNum >= PIN0) && (PinNum <= PIN7))
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	88 30       	cpi	r24, 0x08	; 8
  f2:	60 f5       	brcc	.+88     	; 0x14c <DIO_WritePin+0x6c>
	{
		if(PinValue == 0)
  f4:	8a 81       	ldd	r24, Y+2	; 0x02
  f6:	88 23       	and	r24, r24
  f8:	a9 f4       	brne	.+42     	; 0x124 <DIO_WritePin+0x44>
		{
			CLEAR_BIT(PORTA,PinNum);
  fa:	ab e3       	ldi	r26, 0x3B	; 59
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	eb e3       	ldi	r30, 0x3B	; 59
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	48 2f       	mov	r20, r24
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	28 2f       	mov	r18, r24
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 2e       	mov	r0, r18
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_WritePin+0x38>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	0a 94       	dec	r0
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_WritePin+0x34>
 11c:	80 95       	com	r24
 11e:	84 23       	and	r24, r20
 120:	8c 93       	st	X, r24
 122:	b2 c0       	rjmp	.+356    	; 0x288 <DIO_WritePin+0x1a8>
		}
		else
		{
			SET_BIT(PORTA,PinNum);
 124:	ab e3       	ldi	r26, 0x3B	; 59
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	eb e3       	ldi	r30, 0x3B	; 59
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	48 2f       	mov	r20, r24
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	28 2f       	mov	r18, r24
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 2e       	mov	r0, r18
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_WritePin+0x62>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_WritePin+0x5e>
 146:	84 2b       	or	r24, r20
 148:	8c 93       	st	X, r24
 14a:	9e c0       	rjmp	.+316    	; 0x288 <DIO_WritePin+0x1a8>
		}
	}
	else if((PinNum >= PIN8) && (PinNum <= PIN15))
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	88 30       	cpi	r24, 0x08	; 8
 150:	90 f1       	brcs	.+100    	; 0x1b6 <DIO_WritePin+0xd6>
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	80 31       	cpi	r24, 0x10	; 16
 156:	78 f5       	brcc	.+94     	; 0x1b6 <DIO_WritePin+0xd6>
	{
		PinNum = PinNum - 8;
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	88 50       	subi	r24, 0x08	; 8
 15c:	89 83       	std	Y+1, r24	; 0x01
		if(PinValue == 0)
 15e:	8a 81       	ldd	r24, Y+2	; 0x02
 160:	88 23       	and	r24, r24
 162:	a9 f4       	brne	.+42     	; 0x18e <DIO_WritePin+0xae>
		{
			CLEAR_BIT(PORTB,PinNum);
 164:	a8 e3       	ldi	r26, 0x38	; 56
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	e8 e3       	ldi	r30, 0x38	; 56
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	48 2f       	mov	r20, r24
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	28 2f       	mov	r18, r24
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 2e       	mov	r0, r18
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_WritePin+0xa2>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_WritePin+0x9e>
 186:	80 95       	com	r24
 188:	84 23       	and	r24, r20
 18a:	8c 93       	st	X, r24
 18c:	7d c0       	rjmp	.+250    	; 0x288 <DIO_WritePin+0x1a8>
		}
		else
		{
			SET_BIT(PORTB,PinNum);
 18e:	a8 e3       	ldi	r26, 0x38	; 56
 190:	b0 e0       	ldi	r27, 0x00	; 0
 192:	e8 e3       	ldi	r30, 0x38	; 56
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	48 2f       	mov	r20, r24
 19a:	89 81       	ldd	r24, Y+1	; 0x01
 19c:	28 2f       	mov	r18, r24
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 2e       	mov	r0, r18
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_WritePin+0xcc>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	0a 94       	dec	r0
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_WritePin+0xc8>
 1b0:	84 2b       	or	r24, r20
 1b2:	8c 93       	st	X, r24
 1b4:	69 c0       	rjmp	.+210    	; 0x288 <DIO_WritePin+0x1a8>
		}

	}
	else if((PinNum >= PIN16) && (PinNum <= PIN23))
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	80 31       	cpi	r24, 0x10	; 16
 1ba:	90 f1       	brcs	.+100    	; 0x220 <DIO_WritePin+0x140>
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	88 31       	cpi	r24, 0x18	; 24
 1c0:	78 f5       	brcc	.+94     	; 0x220 <DIO_WritePin+0x140>
	{
		PinNum = PinNum - 16;
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	80 51       	subi	r24, 0x10	; 16
 1c6:	89 83       	std	Y+1, r24	; 0x01
		if(PinValue == 0)
 1c8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ca:	88 23       	and	r24, r24
 1cc:	a9 f4       	brne	.+42     	; 0x1f8 <DIO_WritePin+0x118>
		{
			CLEAR_BIT(PORTC,PinNum);
 1ce:	a5 e3       	ldi	r26, 0x35	; 53
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
 1d2:	e5 e3       	ldi	r30, 0x35	; 53
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	48 2f       	mov	r20, r24
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	28 2f       	mov	r18, r24
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 2e       	mov	r0, r18
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_WritePin+0x10c>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	0a 94       	dec	r0
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_WritePin+0x108>
 1f0:	80 95       	com	r24
 1f2:	84 23       	and	r24, r20
 1f4:	8c 93       	st	X, r24
 1f6:	48 c0       	rjmp	.+144    	; 0x288 <DIO_WritePin+0x1a8>
		}
		else
		{
			SET_BIT(PORTC,PinNum);
 1f8:	a5 e3       	ldi	r26, 0x35	; 53
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	e5 e3       	ldi	r30, 0x35	; 53
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	48 2f       	mov	r20, r24
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	28 2f       	mov	r18, r24
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 2e       	mov	r0, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_WritePin+0x136>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_WritePin+0x132>
 21a:	84 2b       	or	r24, r20
 21c:	8c 93       	st	X, r24
 21e:	34 c0       	rjmp	.+104    	; 0x288 <DIO_WritePin+0x1a8>
		}

	}
	else if((PinNum >= PIN24) && (PinNum <= PIN31))
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	88 31       	cpi	r24, 0x18	; 24
 224:	88 f1       	brcs	.+98     	; 0x288 <DIO_WritePin+0x1a8>
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	80 32       	cpi	r24, 0x20	; 32
 22a:	70 f5       	brcc	.+92     	; 0x288 <DIO_WritePin+0x1a8>
	{
		PinNum = PinNum - 24;
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	88 51       	subi	r24, 0x18	; 24
 230:	89 83       	std	Y+1, r24	; 0x01
		if(PinValue == 0)
 232:	8a 81       	ldd	r24, Y+2	; 0x02
 234:	88 23       	and	r24, r24
 236:	a9 f4       	brne	.+42     	; 0x262 <DIO_WritePin+0x182>
		{
			CLEAR_BIT(PORTD,PinNum);
 238:	a2 e3       	ldi	r26, 0x32	; 50
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	e2 e3       	ldi	r30, 0x32	; 50
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	48 2f       	mov	r20, r24
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	28 2f       	mov	r18, r24
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 2e       	mov	r0, r18
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_WritePin+0x176>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_WritePin+0x172>
 25a:	80 95       	com	r24
 25c:	84 23       	and	r24, r20
 25e:	8c 93       	st	X, r24
 260:	13 c0       	rjmp	.+38     	; 0x288 <DIO_WritePin+0x1a8>
		}
		else
		{
			SET_BIT(PORTD,PinNum);
 262:	a2 e3       	ldi	r26, 0x32	; 50
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	e2 e3       	ldi	r30, 0x32	; 50
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	48 2f       	mov	r20, r24
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	28 2f       	mov	r18, r24
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 2e       	mov	r0, r18
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_WritePin+0x1a0>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	0a 94       	dec	r0
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_WritePin+0x19c>
 284:	84 2b       	or	r24, r20
 286:	8c 93       	st	X, r24
		}

	}
}
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	cf 91       	pop	r28
 28e:	df 91       	pop	r29
 290:	08 95       	ret

00000292 <DIO_ReadPin>:

uint8 DIO_ReadPin(uint8 PinNum)
{
 292:	df 93       	push	r29
 294:	cf 93       	push	r28
 296:	00 d0       	rcall	.+0      	; 0x298 <DIO_ReadPin+0x6>
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value;
	if((PinNum >= PIN0) && (PinNum <= PIN7))
 29e:	8a 81       	ldd	r24, Y+2	; 0x02
 2a0:	88 30       	cpi	r24, 0x08	; 8
 2a2:	90 f4       	brcc	.+36     	; 0x2c8 <DIO_ReadPin+0x36>
	{
		value = IS_BIT_SET(PINA,PinNum);
 2a4:	e9 e3       	ldi	r30, 0x39	; 57
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	48 2f       	mov	r20, r24
 2ac:	8a 81       	ldd	r24, Y+2	; 0x02
 2ae:	28 2f       	mov	r18, r24
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 2e       	mov	r0, r18
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_ReadPin+0x2c>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	0a 94       	dec	r0
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_ReadPin+0x28>
 2c2:	84 23       	and	r24, r20
 2c4:	89 83       	std	Y+1, r24	; 0x01
 2c6:	50 c0       	rjmp	.+160    	; 0x368 <DIO_ReadPin+0xd6>
	}

	else if((PinNum >= PIN8) && (PinNum <= PIN15))
 2c8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ca:	88 30       	cpi	r24, 0x08	; 8
 2cc:	c0 f0       	brcs	.+48     	; 0x2fe <DIO_ReadPin+0x6c>
 2ce:	8a 81       	ldd	r24, Y+2	; 0x02
 2d0:	80 31       	cpi	r24, 0x10	; 16
 2d2:	a8 f4       	brcc	.+42     	; 0x2fe <DIO_ReadPin+0x6c>
	{
		PinNum = PinNum -8;
 2d4:	8a 81       	ldd	r24, Y+2	; 0x02
 2d6:	88 50       	subi	r24, 0x08	; 8
 2d8:	8a 83       	std	Y+2, r24	; 0x02
		value = IS_BIT_SET(PINB,PinNum);
 2da:	e6 e3       	ldi	r30, 0x36	; 54
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	48 2f       	mov	r20, r24
 2e2:	8a 81       	ldd	r24, Y+2	; 0x02
 2e4:	28 2f       	mov	r18, r24
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 2e       	mov	r0, r18
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_ReadPin+0x62>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_ReadPin+0x5e>
 2f8:	84 23       	and	r24, r20
 2fa:	89 83       	std	Y+1, r24	; 0x01
 2fc:	35 c0       	rjmp	.+106    	; 0x368 <DIO_ReadPin+0xd6>

	}
	else if((PinNum >= PIN16) && (PinNum <= PIN23))
 2fe:	8a 81       	ldd	r24, Y+2	; 0x02
 300:	80 31       	cpi	r24, 0x10	; 16
 302:	c0 f0       	brcs	.+48     	; 0x334 <DIO_ReadPin+0xa2>
 304:	8a 81       	ldd	r24, Y+2	; 0x02
 306:	88 31       	cpi	r24, 0x18	; 24
 308:	a8 f4       	brcc	.+42     	; 0x334 <DIO_ReadPin+0xa2>
	{
		PinNum = PinNum -16;
 30a:	8a 81       	ldd	r24, Y+2	; 0x02
 30c:	80 51       	subi	r24, 0x10	; 16
 30e:	8a 83       	std	Y+2, r24	; 0x02
		value = IS_BIT_SET(PINC,PinNum);
 310:	e3 e3       	ldi	r30, 0x33	; 51
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	48 2f       	mov	r20, r24
 318:	8a 81       	ldd	r24, Y+2	; 0x02
 31a:	28 2f       	mov	r18, r24
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 2e       	mov	r0, r18
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_ReadPin+0x98>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	0a 94       	dec	r0
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_ReadPin+0x94>
 32e:	84 23       	and	r24, r20
 330:	89 83       	std	Y+1, r24	; 0x01
 332:	1a c0       	rjmp	.+52     	; 0x368 <DIO_ReadPin+0xd6>

	}
	else if((PinNum >= PIN24) && (PinNum <= PIN31))
 334:	8a 81       	ldd	r24, Y+2	; 0x02
 336:	88 31       	cpi	r24, 0x18	; 24
 338:	b8 f0       	brcs	.+46     	; 0x368 <DIO_ReadPin+0xd6>
 33a:	8a 81       	ldd	r24, Y+2	; 0x02
 33c:	80 32       	cpi	r24, 0x20	; 32
 33e:	a0 f4       	brcc	.+40     	; 0x368 <DIO_ReadPin+0xd6>
	{
		PinNum = PinNum -24;
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	88 51       	subi	r24, 0x18	; 24
 344:	8a 83       	std	Y+2, r24	; 0x02
		value = IS_BIT_SET(PIND,PinNum);
 346:	e0 e3       	ldi	r30, 0x30	; 48
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	48 2f       	mov	r20, r24
 34e:	8a 81       	ldd	r24, Y+2	; 0x02
 350:	28 2f       	mov	r18, r24
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	02 2e       	mov	r0, r18
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_ReadPin+0xce>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	0a 94       	dec	r0
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_ReadPin+0xca>
 364:	84 23       	and	r24, r20
 366:	89 83       	std	Y+1, r24	; 0x01
	}

	if(value != 0)
 368:	89 81       	ldd	r24, Y+1	; 0x01
 36a:	88 23       	and	r24, r24
 36c:	11 f0       	breq	.+4      	; 0x372 <DIO_ReadPin+0xe0>
	{
		value = 1;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	89 83       	std	Y+1, r24	; 0x01
	}
	return value;
 372:	89 81       	ldd	r24, Y+1	; 0x01
}
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	cf 91       	pop	r28
 37a:	df 91       	pop	r29
 37c:	08 95       	ret

0000037e <DIO_SetPinDirection>:

void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
 37e:	df 93       	push	r29
 380:	cf 93       	push	r28
 382:	00 d0       	rcall	.+0      	; 0x384 <DIO_SetPinDirection+0x6>
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
 388:	89 83       	std	Y+1, r24	; 0x01
 38a:	6a 83       	std	Y+2, r22	; 0x02
	if((PinNum >= PIN0) && (PinNum <= PIN7))
 38c:	89 81       	ldd	r24, Y+1	; 0x01
 38e:	88 30       	cpi	r24, 0x08	; 8
 390:	58 f5       	brcc	.+86     	; 0x3e8 <DIO_SetPinDirection+0x6a>
	{
		if(PinDirection == 0)
 392:	8a 81       	ldd	r24, Y+2	; 0x02
 394:	88 23       	and	r24, r24
 396:	a9 f4       	brne	.+42     	; 0x3c2 <DIO_SetPinDirection+0x44>
		{
			CLEAR_BIT(DDRA,PinNum);
 398:	aa e3       	ldi	r26, 0x3A	; 58
 39a:	b0 e0       	ldi	r27, 0x00	; 0
 39c:	ea e3       	ldi	r30, 0x3A	; 58
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	48 2f       	mov	r20, r24
 3a4:	89 81       	ldd	r24, Y+1	; 0x01
 3a6:	28 2f       	mov	r18, r24
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 2e       	mov	r0, r18
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_SetPinDirection+0x38>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	0a 94       	dec	r0
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_SetPinDirection+0x34>
 3ba:	80 95       	com	r24
 3bc:	84 23       	and	r24, r20
 3be:	8c 93       	st	X, r24
 3c0:	13 c0       	rjmp	.+38     	; 0x3e8 <DIO_SetPinDirection+0x6a>
		}
		else
		{
			SET_BIT(DDRA,PinNum);
 3c2:	aa e3       	ldi	r26, 0x3A	; 58
 3c4:	b0 e0       	ldi	r27, 0x00	; 0
 3c6:	ea e3       	ldi	r30, 0x3A	; 58
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	48 2f       	mov	r20, r24
 3ce:	89 81       	ldd	r24, Y+1	; 0x01
 3d0:	28 2f       	mov	r18, r24
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 2e       	mov	r0, r18
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_SetPinDirection+0x62>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	0a 94       	dec	r0
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_SetPinDirection+0x5e>
 3e4:	84 2b       	or	r24, r20
 3e6:	8c 93       	st	X, r24
		}
	}
	if((PinNum >= PIN8) && (PinNum <= PIN15))
 3e8:	89 81       	ldd	r24, Y+1	; 0x01
 3ea:	88 30       	cpi	r24, 0x08	; 8
 3ec:	88 f1       	brcs	.+98     	; 0x450 <DIO_SetPinDirection+0xd2>
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	80 31       	cpi	r24, 0x10	; 16
 3f2:	70 f5       	brcc	.+92     	; 0x450 <DIO_SetPinDirection+0xd2>
	{
		PinNum = PinNum -8;
 3f4:	89 81       	ldd	r24, Y+1	; 0x01
 3f6:	88 50       	subi	r24, 0x08	; 8
 3f8:	89 83       	std	Y+1, r24	; 0x01
		if(PinDirection == 0)
 3fa:	8a 81       	ldd	r24, Y+2	; 0x02
 3fc:	88 23       	and	r24, r24
 3fe:	a9 f4       	brne	.+42     	; 0x42a <DIO_SetPinDirection+0xac>
		{
			CLEAR_BIT(DDRB,PinNum);
 400:	a7 e3       	ldi	r26, 0x37	; 55
 402:	b0 e0       	ldi	r27, 0x00	; 0
 404:	e7 e3       	ldi	r30, 0x37	; 55
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	48 2f       	mov	r20, r24
 40c:	89 81       	ldd	r24, Y+1	; 0x01
 40e:	28 2f       	mov	r18, r24
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 2e       	mov	r0, r18
 418:	02 c0       	rjmp	.+4      	; 0x41e <DIO_SetPinDirection+0xa0>
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	0a 94       	dec	r0
 420:	e2 f7       	brpl	.-8      	; 0x41a <DIO_SetPinDirection+0x9c>
 422:	80 95       	com	r24
 424:	84 23       	and	r24, r20
 426:	8c 93       	st	X, r24
 428:	13 c0       	rjmp	.+38     	; 0x450 <DIO_SetPinDirection+0xd2>
		}
		else
		{
			SET_BIT(DDRB,PinNum);
 42a:	a7 e3       	ldi	r26, 0x37	; 55
 42c:	b0 e0       	ldi	r27, 0x00	; 0
 42e:	e7 e3       	ldi	r30, 0x37	; 55
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 81       	ld	r24, Z
 434:	48 2f       	mov	r20, r24
 436:	89 81       	ldd	r24, Y+1	; 0x01
 438:	28 2f       	mov	r18, r24
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	02 2e       	mov	r0, r18
 442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_SetPinDirection+0xca>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	0a 94       	dec	r0
 44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_SetPinDirection+0xc6>
 44c:	84 2b       	or	r24, r20
 44e:	8c 93       	st	X, r24
		}
	}
	if((PinNum >= PIN16) && (PinNum <= PIN23))
 450:	89 81       	ldd	r24, Y+1	; 0x01
 452:	80 31       	cpi	r24, 0x10	; 16
 454:	88 f1       	brcs	.+98     	; 0x4b8 <DIO_SetPinDirection+0x13a>
 456:	89 81       	ldd	r24, Y+1	; 0x01
 458:	88 31       	cpi	r24, 0x18	; 24
 45a:	70 f5       	brcc	.+92     	; 0x4b8 <DIO_SetPinDirection+0x13a>
	{
		PinNum = PinNum - 16;
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	80 51       	subi	r24, 0x10	; 16
 460:	89 83       	std	Y+1, r24	; 0x01
		if(PinDirection == 0)
 462:	8a 81       	ldd	r24, Y+2	; 0x02
 464:	88 23       	and	r24, r24
 466:	a9 f4       	brne	.+42     	; 0x492 <DIO_SetPinDirection+0x114>
		{
			CLEAR_BIT(DDRC,PinNum);
 468:	a4 e3       	ldi	r26, 0x34	; 52
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	e4 e3       	ldi	r30, 0x34	; 52
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	48 2f       	mov	r20, r24
 474:	89 81       	ldd	r24, Y+1	; 0x01
 476:	28 2f       	mov	r18, r24
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	02 2e       	mov	r0, r18
 480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_SetPinDirection+0x108>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	0a 94       	dec	r0
 488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_SetPinDirection+0x104>
 48a:	80 95       	com	r24
 48c:	84 23       	and	r24, r20
 48e:	8c 93       	st	X, r24
 490:	13 c0       	rjmp	.+38     	; 0x4b8 <DIO_SetPinDirection+0x13a>
		}
		else
		{
			SET_BIT(DDRC,PinNum);
 492:	a4 e3       	ldi	r26, 0x34	; 52
 494:	b0 e0       	ldi	r27, 0x00	; 0
 496:	e4 e3       	ldi	r30, 0x34	; 52
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	80 81       	ld	r24, Z
 49c:	48 2f       	mov	r20, r24
 49e:	89 81       	ldd	r24, Y+1	; 0x01
 4a0:	28 2f       	mov	r18, r24
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	02 2e       	mov	r0, r18
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_SetPinDirection+0x132>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	0a 94       	dec	r0
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_SetPinDirection+0x12e>
 4b4:	84 2b       	or	r24, r20
 4b6:	8c 93       	st	X, r24
		}
	}
	if((PinNum >= PIN24) && (PinNum <= PIN31))
 4b8:	89 81       	ldd	r24, Y+1	; 0x01
 4ba:	88 31       	cpi	r24, 0x18	; 24
 4bc:	88 f1       	brcs	.+98     	; 0x520 <DIO_SetPinDirection+0x1a2>
 4be:	89 81       	ldd	r24, Y+1	; 0x01
 4c0:	80 32       	cpi	r24, 0x20	; 32
 4c2:	70 f5       	brcc	.+92     	; 0x520 <DIO_SetPinDirection+0x1a2>
	{
		PinNum = PinNum - 24;
 4c4:	89 81       	ldd	r24, Y+1	; 0x01
 4c6:	88 51       	subi	r24, 0x18	; 24
 4c8:	89 83       	std	Y+1, r24	; 0x01
		if(PinDirection == 0)
 4ca:	8a 81       	ldd	r24, Y+2	; 0x02
 4cc:	88 23       	and	r24, r24
 4ce:	a9 f4       	brne	.+42     	; 0x4fa <DIO_SetPinDirection+0x17c>
		{
			CLEAR_BIT(DDRD,PinNum);
 4d0:	a1 e3       	ldi	r26, 0x31	; 49
 4d2:	b0 e0       	ldi	r27, 0x00	; 0
 4d4:	e1 e3       	ldi	r30, 0x31	; 49
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	48 2f       	mov	r20, r24
 4dc:	89 81       	ldd	r24, Y+1	; 0x01
 4de:	28 2f       	mov	r18, r24
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	02 2e       	mov	r0, r18
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_SetPinDirection+0x170>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	0a 94       	dec	r0
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_SetPinDirection+0x16c>
 4f2:	80 95       	com	r24
 4f4:	84 23       	and	r24, r20
 4f6:	8c 93       	st	X, r24
 4f8:	13 c0       	rjmp	.+38     	; 0x520 <DIO_SetPinDirection+0x1a2>
		}
		else
		{
			SET_BIT(DDRD,PinNum);
 4fa:	a1 e3       	ldi	r26, 0x31	; 49
 4fc:	b0 e0       	ldi	r27, 0x00	; 0
 4fe:	e1 e3       	ldi	r30, 0x31	; 49
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	48 2f       	mov	r20, r24
 506:	89 81       	ldd	r24, Y+1	; 0x01
 508:	28 2f       	mov	r18, r24
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 2e       	mov	r0, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_SetPinDirection+0x19a>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	0a 94       	dec	r0
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_SetPinDirection+0x196>
 51c:	84 2b       	or	r24, r20
 51e:	8c 93       	st	X, r24
		}
	}

}
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
 524:	cf 91       	pop	r28
 526:	df 91       	pop	r29
 528:	08 95       	ret

0000052a <UART_Init>:
 */

#include"uart.h"

Status UART_Init(UART_cfg* a_UartCfg_ptr)
{
 52a:	df 93       	push	r29
 52c:	cf 93       	push	r28
 52e:	00 d0       	rcall	.+0      	; 0x530 <UART_Init+0x6>
 530:	00 d0       	rcall	.+0      	; 0x532 <UART_Init+0x8>
 532:	0f 92       	push	r0
 534:	cd b7       	in	r28, 0x3d	; 61
 536:	de b7       	in	r29, 0x3e	; 62
 538:	9c 83       	std	Y+4, r25	; 0x04
 53a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 UBRR = 0u;
 53c:	1a 82       	std	Y+2, r1	; 0x02
 53e:	19 82       	std	Y+1, r1	; 0x01
	if(a_UartCfg_ptr -> DoubleSpeed == UART_DoubleSpeedDisable)
 540:	eb 81       	ldd	r30, Y+3	; 0x03
 542:	fc 81       	ldd	r31, Y+4	; 0x04
 544:	82 81       	ldd	r24, Z+2	; 0x02
 546:	88 23       	and	r24, r24
 548:	71 f5       	brne	.+92     	; 0x5a6 <UART_Init+0x7c>
	{
		CLEAR_BIT(UCSRA,U2X);
 54a:	ab e2       	ldi	r26, 0x2B	; 43
 54c:	b0 e0       	ldi	r27, 0x00	; 0
 54e:	eb e2       	ldi	r30, 0x2B	; 43
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	8d 7f       	andi	r24, 0xFD	; 253
 556:	8c 93       	st	X, r24
		UBRR = (((F_CPU / (a_UartCfg_ptr->baud_rate * 16UL))) - 1);
 558:	eb 81       	ldd	r30, Y+3	; 0x03
 55a:	fc 81       	ldd	r31, Y+4	; 0x04
 55c:	80 81       	ld	r24, Z
 55e:	91 81       	ldd	r25, Z+1	; 0x01
 560:	cc 01       	movw	r24, r24
 562:	a0 e0       	ldi	r26, 0x00	; 0
 564:	b0 e0       	ldi	r27, 0x00	; 0
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	aa 1f       	adc	r26, r26
 56c:	bb 1f       	adc	r27, r27
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	aa 1f       	adc	r26, r26
 574:	bb 1f       	adc	r27, r27
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	aa 1f       	adc	r26, r26
 57c:	bb 1f       	adc	r27, r27
 57e:	88 0f       	add	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	aa 1f       	adc	r26, r26
 584:	bb 1f       	adc	r27, r27
 586:	9c 01       	movw	r18, r24
 588:	ad 01       	movw	r20, r26
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	92 e1       	ldi	r25, 0x12	; 18
 58e:	aa e7       	ldi	r26, 0x7A	; 122
 590:	b0 e0       	ldi	r27, 0x00	; 0
 592:	bc 01       	movw	r22, r24
 594:	cd 01       	movw	r24, r26
 596:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__udivmodsi4>
 59a:	da 01       	movw	r26, r20
 59c:	c9 01       	movw	r24, r18
 59e:	01 97       	sbiw	r24, 0x01	; 1
 5a0:	9a 83       	std	Y+2, r25	; 0x02
 5a2:	89 83       	std	Y+1, r24	; 0x01
 5a4:	31 c0       	rjmp	.+98     	; 0x608 <UART_Init+0xde>
	}
	else if(a_UartCfg_ptr->DoubleSpeed == UART_DoubleSpeedEn)
 5a6:	eb 81       	ldd	r30, Y+3	; 0x03
 5a8:	fc 81       	ldd	r31, Y+4	; 0x04
 5aa:	82 81       	ldd	r24, Z+2	; 0x02
 5ac:	81 30       	cpi	r24, 0x01	; 1
 5ae:	51 f5       	brne	.+84     	; 0x604 <UART_Init+0xda>
	{
		SET_BIT(UCSRA,U2X);
 5b0:	ab e2       	ldi	r26, 0x2B	; 43
 5b2:	b0 e0       	ldi	r27, 0x00	; 0
 5b4:	eb e2       	ldi	r30, 0x2B	; 43
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	80 81       	ld	r24, Z
 5ba:	82 60       	ori	r24, 0x02	; 2
 5bc:	8c 93       	st	X, r24
		UBRR = (((F_CPU / (a_UartCfg_ptr->baud_rate * 8UL))) - 1);
 5be:	eb 81       	ldd	r30, Y+3	; 0x03
 5c0:	fc 81       	ldd	r31, Y+4	; 0x04
 5c2:	80 81       	ld	r24, Z
 5c4:	91 81       	ldd	r25, Z+1	; 0x01
 5c6:	cc 01       	movw	r24, r24
 5c8:	a0 e0       	ldi	r26, 0x00	; 0
 5ca:	b0 e0       	ldi	r27, 0x00	; 0
 5cc:	88 0f       	add	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	aa 1f       	adc	r26, r26
 5d2:	bb 1f       	adc	r27, r27
 5d4:	88 0f       	add	r24, r24
 5d6:	99 1f       	adc	r25, r25
 5d8:	aa 1f       	adc	r26, r26
 5da:	bb 1f       	adc	r27, r27
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	aa 1f       	adc	r26, r26
 5e2:	bb 1f       	adc	r27, r27
 5e4:	9c 01       	movw	r18, r24
 5e6:	ad 01       	movw	r20, r26
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	92 e1       	ldi	r25, 0x12	; 18
 5ec:	aa e7       	ldi	r26, 0x7A	; 122
 5ee:	b0 e0       	ldi	r27, 0x00	; 0
 5f0:	bc 01       	movw	r22, r24
 5f2:	cd 01       	movw	r24, r26
 5f4:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__udivmodsi4>
 5f8:	da 01       	movw	r26, r20
 5fa:	c9 01       	movw	r24, r18
 5fc:	01 97       	sbiw	r24, 0x01	; 1
 5fe:	9a 83       	std	Y+2, r25	; 0x02
 600:	89 83       	std	Y+1, r24	; 0x01
 602:	02 c0       	rjmp	.+4      	; 0x608 <UART_Init+0xde>
	}
	else
	{
		return NotOk;
 604:	1d 82       	std	Y+5, r1	; 0x05
 606:	4f c1       	rjmp	.+670    	; 0x8a6 <__stack+0x47>
	}

	/*clear to choose UBRRH*/
	CLEAR_BIT(UCSRC,URSEL);
 608:	a0 e4       	ldi	r26, 0x40	; 64
 60a:	b0 e0       	ldi	r27, 0x00	; 0
 60c:	e0 e4       	ldi	r30, 0x40	; 64
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	8f 77       	andi	r24, 0x7F	; 127
 614:	8c 93       	st	X, r24
	UBRRL = (uint8)UBRR;
 616:	e9 e2       	ldi	r30, 0x29	; 41
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	89 81       	ldd	r24, Y+1	; 0x01
 61c:	80 83       	st	Z, r24
	UBRRH = (uint8)(UBRR >> 8);
 61e:	e0 e4       	ldi	r30, 0x40	; 64
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	89 81       	ldd	r24, Y+1	; 0x01
 624:	9a 81       	ldd	r25, Y+2	; 0x02
 626:	89 2f       	mov	r24, r25
 628:	99 27       	eor	r25, r25
 62a:	80 83       	st	Z, r24
	SET_BIT(UCSRC,URSEL);
 62c:	a0 e4       	ldi	r26, 0x40	; 64
 62e:	b0 e0       	ldi	r27, 0x00	; 0
 630:	e0 e4       	ldi	r30, 0x40	; 64
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	80 68       	ori	r24, 0x80	; 128
 638:	8c 93       	st	X, r24
	/*set to choose UCSRC*/
	/*************************************************************************************/
	if(a_UartCfg_ptr -> TxInt  == UART_TxIntDisabled)
 63a:	eb 81       	ldd	r30, Y+3	; 0x03
 63c:	fc 81       	ldd	r31, Y+4	; 0x04
 63e:	83 81       	ldd	r24, Z+3	; 0x03
 640:	88 23       	and	r24, r24
 642:	41 f4       	brne	.+16     	; 0x654 <UART_Init+0x12a>
	{
		CLEAR_BIT(UCSRB,TXCIE);
 644:	aa e2       	ldi	r26, 0x2A	; 42
 646:	b0 e0       	ldi	r27, 0x00	; 0
 648:	ea e2       	ldi	r30, 0x2A	; 42
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	80 81       	ld	r24, Z
 64e:	8f 7b       	andi	r24, 0xBF	; 191
 650:	8c 93       	st	X, r24
 652:	0f c0       	rjmp	.+30     	; 0x672 <UART_Init+0x148>
	}
	else if(a_UartCfg_ptr -> TxInt  == UART_TxIntEn)
 654:	eb 81       	ldd	r30, Y+3	; 0x03
 656:	fc 81       	ldd	r31, Y+4	; 0x04
 658:	83 81       	ldd	r24, Z+3	; 0x03
 65a:	81 30       	cpi	r24, 0x01	; 1
 65c:	41 f4       	brne	.+16     	; 0x66e <UART_Init+0x144>
	{
		SET_BIT(UCSRB,TXCIE);
 65e:	aa e2       	ldi	r26, 0x2A	; 42
 660:	b0 e0       	ldi	r27, 0x00	; 0
 662:	ea e2       	ldi	r30, 0x2A	; 42
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	80 81       	ld	r24, Z
 668:	80 64       	ori	r24, 0x40	; 64
 66a:	8c 93       	st	X, r24
 66c:	02 c0       	rjmp	.+4      	; 0x672 <UART_Init+0x148>
	}
	else
	{
		return NotOk;
 66e:	1d 82       	std	Y+5, r1	; 0x05
 670:	1a c1       	rjmp	.+564    	; 0x8a6 <__stack+0x47>
	}
	/*************************************************************************************/
	if(a_UartCfg_ptr -> RxInt  == UART_RxIntDisabled)
 672:	eb 81       	ldd	r30, Y+3	; 0x03
 674:	fc 81       	ldd	r31, Y+4	; 0x04
 676:	84 81       	ldd	r24, Z+4	; 0x04
 678:	88 23       	and	r24, r24
 67a:	41 f4       	brne	.+16     	; 0x68c <UART_Init+0x162>
	{
		CLEAR_BIT(UCSRB,RXCIE);
 67c:	aa e2       	ldi	r26, 0x2A	; 42
 67e:	b0 e0       	ldi	r27, 0x00	; 0
 680:	ea e2       	ldi	r30, 0x2A	; 42
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	80 81       	ld	r24, Z
 686:	8f 77       	andi	r24, 0x7F	; 127
 688:	8c 93       	st	X, r24
 68a:	0f c0       	rjmp	.+30     	; 0x6aa <UART_Init+0x180>
	}
	else if(a_UartCfg_ptr -> RxInt  == UART_RxIntEn)
 68c:	eb 81       	ldd	r30, Y+3	; 0x03
 68e:	fc 81       	ldd	r31, Y+4	; 0x04
 690:	84 81       	ldd	r24, Z+4	; 0x04
 692:	81 30       	cpi	r24, 0x01	; 1
 694:	41 f4       	brne	.+16     	; 0x6a6 <UART_Init+0x17c>
	{
		SET_BIT(UCSRB,RXCIE);
 696:	aa e2       	ldi	r26, 0x2A	; 42
 698:	b0 e0       	ldi	r27, 0x00	; 0
 69a:	ea e2       	ldi	r30, 0x2A	; 42
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	80 81       	ld	r24, Z
 6a0:	80 68       	ori	r24, 0x80	; 128
 6a2:	8c 93       	st	X, r24
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <UART_Init+0x180>
	}
	else
	{
		return NotOk;
 6a6:	1d 82       	std	Y+5, r1	; 0x05
 6a8:	fe c0       	rjmp	.+508    	; 0x8a6 <__stack+0x47>
	}
	/***************************************************************************************/
	if(a_UartCfg_ptr -> Udr == UART_UdrDisabled)
 6aa:	eb 81       	ldd	r30, Y+3	; 0x03
 6ac:	fc 81       	ldd	r31, Y+4	; 0x04
 6ae:	85 81       	ldd	r24, Z+5	; 0x05
 6b0:	88 23       	and	r24, r24
 6b2:	41 f4       	brne	.+16     	; 0x6c4 <UART_Init+0x19a>
	{
		CLEAR_BIT(UCSRB,UDRIE);
 6b4:	aa e2       	ldi	r26, 0x2A	; 42
 6b6:	b0 e0       	ldi	r27, 0x00	; 0
 6b8:	ea e2       	ldi	r30, 0x2A	; 42
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	80 81       	ld	r24, Z
 6be:	8f 7d       	andi	r24, 0xDF	; 223
 6c0:	8c 93       	st	X, r24
 6c2:	0f c0       	rjmp	.+30     	; 0x6e2 <UART_Init+0x1b8>
	}
	else if(a_UartCfg_ptr -> Udr  == UART_UdrEn)
 6c4:	eb 81       	ldd	r30, Y+3	; 0x03
 6c6:	fc 81       	ldd	r31, Y+4	; 0x04
 6c8:	85 81       	ldd	r24, Z+5	; 0x05
 6ca:	81 30       	cpi	r24, 0x01	; 1
 6cc:	41 f4       	brne	.+16     	; 0x6de <UART_Init+0x1b4>
	{
		SET_BIT(UCSRB,UDRIE);
 6ce:	aa e2       	ldi	r26, 0x2A	; 42
 6d0:	b0 e0       	ldi	r27, 0x00	; 0
 6d2:	ea e2       	ldi	r30, 0x2A	; 42
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 81       	ld	r24, Z
 6d8:	80 62       	ori	r24, 0x20	; 32
 6da:	8c 93       	st	X, r24
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <UART_Init+0x1b8>
	}
	else
	{
		return NotOk;
 6de:	1d 82       	std	Y+5, r1	; 0x05
 6e0:	e2 c0       	rjmp	.+452    	; 0x8a6 <__stack+0x47>
	}
	/********************************************************************************************/
	if(a_UartCfg_ptr -> DataSize == Bit5)
 6e2:	eb 81       	ldd	r30, Y+3	; 0x03
 6e4:	fc 81       	ldd	r31, Y+4	; 0x04
 6e6:	86 81       	ldd	r24, Z+6	; 0x06
 6e8:	85 30       	cpi	r24, 0x05	; 5
 6ea:	b1 f4       	brne	.+44     	; 0x718 <UART_Init+0x1ee>
	{
		CLEAR_BIT(UCSRB,UCSZ2);
 6ec:	aa e2       	ldi	r26, 0x2A	; 42
 6ee:	b0 e0       	ldi	r27, 0x00	; 0
 6f0:	ea e2       	ldi	r30, 0x2A	; 42
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	80 81       	ld	r24, Z
 6f6:	8b 7f       	andi	r24, 0xFB	; 251
 6f8:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ1);
 6fa:	a0 e4       	ldi	r26, 0x40	; 64
 6fc:	b0 e0       	ldi	r27, 0x00	; 0
 6fe:	e0 e4       	ldi	r30, 0x40	; 64
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 81       	ld	r24, Z
 704:	8b 7f       	andi	r24, 0xFB	; 251
 706:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ0);
 708:	a0 e4       	ldi	r26, 0x40	; 64
 70a:	b0 e0       	ldi	r27, 0x00	; 0
 70c:	e0 e4       	ldi	r30, 0x40	; 64
 70e:	f0 e0       	ldi	r31, 0x00	; 0
 710:	80 81       	ld	r24, Z
 712:	8d 7f       	andi	r24, 0xFD	; 253
 714:	8c 93       	st	X, r24
 716:	6e c0       	rjmp	.+220    	; 0x7f4 <UART_Init+0x2ca>
	}
	else if(a_UartCfg_ptr -> DataSize == Bit6)
 718:	eb 81       	ldd	r30, Y+3	; 0x03
 71a:	fc 81       	ldd	r31, Y+4	; 0x04
 71c:	86 81       	ldd	r24, Z+6	; 0x06
 71e:	86 30       	cpi	r24, 0x06	; 6
 720:	b1 f4       	brne	.+44     	; 0x74e <UART_Init+0x224>
	{
		CLEAR_BIT(UCSRB,UCSZ2);
 722:	aa e2       	ldi	r26, 0x2A	; 42
 724:	b0 e0       	ldi	r27, 0x00	; 0
 726:	ea e2       	ldi	r30, 0x2A	; 42
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	80 81       	ld	r24, Z
 72c:	8b 7f       	andi	r24, 0xFB	; 251
 72e:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ1);
 730:	a0 e4       	ldi	r26, 0x40	; 64
 732:	b0 e0       	ldi	r27, 0x00	; 0
 734:	e0 e4       	ldi	r30, 0x40	; 64
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	80 81       	ld	r24, Z
 73a:	8b 7f       	andi	r24, 0xFB	; 251
 73c:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ0);
 73e:	a0 e4       	ldi	r26, 0x40	; 64
 740:	b0 e0       	ldi	r27, 0x00	; 0
 742:	e0 e4       	ldi	r30, 0x40	; 64
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	80 81       	ld	r24, Z
 748:	82 60       	ori	r24, 0x02	; 2
 74a:	8c 93       	st	X, r24
 74c:	53 c0       	rjmp	.+166    	; 0x7f4 <UART_Init+0x2ca>
	}
	else if(a_UartCfg_ptr -> DataSize == Bit7)
 74e:	eb 81       	ldd	r30, Y+3	; 0x03
 750:	fc 81       	ldd	r31, Y+4	; 0x04
 752:	86 81       	ldd	r24, Z+6	; 0x06
 754:	87 30       	cpi	r24, 0x07	; 7
 756:	b1 f4       	brne	.+44     	; 0x784 <UART_Init+0x25a>
	{
		CLEAR_BIT(UCSRB,UCSZ2);
 758:	aa e2       	ldi	r26, 0x2A	; 42
 75a:	b0 e0       	ldi	r27, 0x00	; 0
 75c:	ea e2       	ldi	r30, 0x2A	; 42
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	80 81       	ld	r24, Z
 762:	8b 7f       	andi	r24, 0xFB	; 251
 764:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
 766:	a0 e4       	ldi	r26, 0x40	; 64
 768:	b0 e0       	ldi	r27, 0x00	; 0
 76a:	e0 e4       	ldi	r30, 0x40	; 64
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	80 81       	ld	r24, Z
 770:	84 60       	ori	r24, 0x04	; 4
 772:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ0);
 774:	a0 e4       	ldi	r26, 0x40	; 64
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	e0 e4       	ldi	r30, 0x40	; 64
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	80 81       	ld	r24, Z
 77e:	8d 7f       	andi	r24, 0xFD	; 253
 780:	8c 93       	st	X, r24
 782:	38 c0       	rjmp	.+112    	; 0x7f4 <UART_Init+0x2ca>
	}
	else if(a_UartCfg_ptr -> DataSize == Bit8)
 784:	eb 81       	ldd	r30, Y+3	; 0x03
 786:	fc 81       	ldd	r31, Y+4	; 0x04
 788:	86 81       	ldd	r24, Z+6	; 0x06
 78a:	88 30       	cpi	r24, 0x08	; 8
 78c:	b1 f4       	brne	.+44     	; 0x7ba <UART_Init+0x290>
	{
		CLEAR_BIT(UCSRB,UCSZ2);
 78e:	aa e2       	ldi	r26, 0x2A	; 42
 790:	b0 e0       	ldi	r27, 0x00	; 0
 792:	ea e2       	ldi	r30, 0x2A	; 42
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	80 81       	ld	r24, Z
 798:	8b 7f       	andi	r24, 0xFB	; 251
 79a:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
 79c:	a0 e4       	ldi	r26, 0x40	; 64
 79e:	b0 e0       	ldi	r27, 0x00	; 0
 7a0:	e0 e4       	ldi	r30, 0x40	; 64
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	80 81       	ld	r24, Z
 7a6:	84 60       	ori	r24, 0x04	; 4
 7a8:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ0);
 7aa:	a0 e4       	ldi	r26, 0x40	; 64
 7ac:	b0 e0       	ldi	r27, 0x00	; 0
 7ae:	e0 e4       	ldi	r30, 0x40	; 64
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	80 81       	ld	r24, Z
 7b4:	82 60       	ori	r24, 0x02	; 2
 7b6:	8c 93       	st	X, r24
 7b8:	1d c0       	rjmp	.+58     	; 0x7f4 <UART_Init+0x2ca>
	}
	else if(a_UartCfg_ptr -> DataSize == Bit9)
 7ba:	eb 81       	ldd	r30, Y+3	; 0x03
 7bc:	fc 81       	ldd	r31, Y+4	; 0x04
 7be:	86 81       	ldd	r24, Z+6	; 0x06
 7c0:	89 30       	cpi	r24, 0x09	; 9
 7c2:	b1 f4       	brne	.+44     	; 0x7f0 <UART_Init+0x2c6>
	{
		SET_BIT(UCSRB,UCSZ2);
 7c4:	aa e2       	ldi	r26, 0x2A	; 42
 7c6:	b0 e0       	ldi	r27, 0x00	; 0
 7c8:	ea e2       	ldi	r30, 0x2A	; 42
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	80 81       	ld	r24, Z
 7ce:	84 60       	ori	r24, 0x04	; 4
 7d0:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
 7d2:	a0 e4       	ldi	r26, 0x40	; 64
 7d4:	b0 e0       	ldi	r27, 0x00	; 0
 7d6:	e0 e4       	ldi	r30, 0x40	; 64
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	80 81       	ld	r24, Z
 7dc:	84 60       	ori	r24, 0x04	; 4
 7de:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ0);
 7e0:	a0 e4       	ldi	r26, 0x40	; 64
 7e2:	b0 e0       	ldi	r27, 0x00	; 0
 7e4:	e0 e4       	ldi	r30, 0x40	; 64
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	80 81       	ld	r24, Z
 7ea:	82 60       	ori	r24, 0x02	; 2
 7ec:	8c 93       	st	X, r24
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <UART_Init+0x2ca>
	}
	else
	{
		return NotOk;
 7f0:	1d 82       	std	Y+5, r1	; 0x05
 7f2:	59 c0       	rjmp	.+178    	; 0x8a6 <__stack+0x47>
	}

	/*********************************************************************************/
	if(a_UartCfg_ptr -> Parity == UART_ParityDisabled)
 7f4:	eb 81       	ldd	r30, Y+3	; 0x03
 7f6:	fc 81       	ldd	r31, Y+4	; 0x04
 7f8:	87 81       	ldd	r24, Z+7	; 0x07
 7fa:	88 23       	and	r24, r24
 7fc:	79 f4       	brne	.+30     	; 0x81c <UART_Init+0x2f2>
	{
		CLEAR_BIT(UCSRC,UPM0);
 7fe:	a0 e4       	ldi	r26, 0x40	; 64
 800:	b0 e0       	ldi	r27, 0x00	; 0
 802:	e0 e4       	ldi	r30, 0x40	; 64
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	80 81       	ld	r24, Z
 808:	8f 7e       	andi	r24, 0xEF	; 239
 80a:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM1);
 80c:	a0 e4       	ldi	r26, 0x40	; 64
 80e:	b0 e0       	ldi	r27, 0x00	; 0
 810:	e0 e4       	ldi	r30, 0x40	; 64
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	80 81       	ld	r24, Z
 816:	8f 7d       	andi	r24, 0xDF	; 223
 818:	8c 93       	st	X, r24
 81a:	2a c0       	rjmp	.+84     	; 0x870 <__stack+0x11>
	}
	else if(a_UartCfg_ptr -> Parity == UART_ParityOdd)
 81c:	eb 81       	ldd	r30, Y+3	; 0x03
 81e:	fc 81       	ldd	r31, Y+4	; 0x04
 820:	87 81       	ldd	r24, Z+7	; 0x07
 822:	81 30       	cpi	r24, 0x01	; 1
 824:	79 f4       	brne	.+30     	; 0x844 <UART_Init+0x31a>
	{
		SET_BIT(UCSRC,UPM0);
 826:	a0 e4       	ldi	r26, 0x40	; 64
 828:	b0 e0       	ldi	r27, 0x00	; 0
 82a:	e0 e4       	ldi	r30, 0x40	; 64
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	80 81       	ld	r24, Z
 830:	80 61       	ori	r24, 0x10	; 16
 832:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM1);
 834:	a0 e4       	ldi	r26, 0x40	; 64
 836:	b0 e0       	ldi	r27, 0x00	; 0
 838:	e0 e4       	ldi	r30, 0x40	; 64
 83a:	f0 e0       	ldi	r31, 0x00	; 0
 83c:	80 81       	ld	r24, Z
 83e:	80 62       	ori	r24, 0x20	; 32
 840:	8c 93       	st	X, r24
 842:	16 c0       	rjmp	.+44     	; 0x870 <__stack+0x11>
	}
	else if(a_UartCfg_ptr -> Parity == UART_ParityEven)
 844:	eb 81       	ldd	r30, Y+3	; 0x03
 846:	fc 81       	ldd	r31, Y+4	; 0x04
 848:	87 81       	ldd	r24, Z+7	; 0x07
 84a:	82 30       	cpi	r24, 0x02	; 2
 84c:	79 f4       	brne	.+30     	; 0x86c <__stack+0xd>
	{
		CLEAR_BIT(UCSRC,UPM0);
 84e:	a0 e4       	ldi	r26, 0x40	; 64
 850:	b0 e0       	ldi	r27, 0x00	; 0
 852:	e0 e4       	ldi	r30, 0x40	; 64
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	80 81       	ld	r24, Z
 858:	8f 7e       	andi	r24, 0xEF	; 239
 85a:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM1);
 85c:	a0 e4       	ldi	r26, 0x40	; 64
 85e:	b0 e0       	ldi	r27, 0x00	; 0
 860:	e0 e4       	ldi	r30, 0x40	; 64
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	80 81       	ld	r24, Z
 866:	80 62       	ori	r24, 0x20	; 32
 868:	8c 93       	st	X, r24
 86a:	02 c0       	rjmp	.+4      	; 0x870 <__stack+0x11>
	}
	else
	{
		return NotOk;
 86c:	1d 82       	std	Y+5, r1	; 0x05
 86e:	1b c0       	rjmp	.+54     	; 0x8a6 <__stack+0x47>
	}

	/*****************************************************************************/
	if(a_UartCfg_ptr -> StopBits == UART_StopBit1)
 870:	eb 81       	ldd	r30, Y+3	; 0x03
 872:	fc 81       	ldd	r31, Y+4	; 0x04
 874:	80 85       	ldd	r24, Z+8	; 0x08
 876:	81 30       	cpi	r24, 0x01	; 1
 878:	41 f4       	brne	.+16     	; 0x88a <__stack+0x2b>
	{
		CLEAR_BIT(UCSRC,USBS);
 87a:	a0 e4       	ldi	r26, 0x40	; 64
 87c:	b0 e0       	ldi	r27, 0x00	; 0
 87e:	e0 e4       	ldi	r30, 0x40	; 64
 880:	f0 e0       	ldi	r31, 0x00	; 0
 882:	80 81       	ld	r24, Z
 884:	87 7f       	andi	r24, 0xF7	; 247
 886:	8c 93       	st	X, r24
 888:	0c c0       	rjmp	.+24     	; 0x8a2 <__stack+0x43>
	}
	else if(a_UartCfg_ptr -> StopBits == UART_StopBit2)
 88a:	eb 81       	ldd	r30, Y+3	; 0x03
 88c:	fc 81       	ldd	r31, Y+4	; 0x04
 88e:	80 85       	ldd	r24, Z+8	; 0x08
 890:	82 30       	cpi	r24, 0x02	; 2
 892:	39 f4       	brne	.+14     	; 0x8a2 <__stack+0x43>
	{
		SET_BIT(UCSRC,USBS);
 894:	a0 e4       	ldi	r26, 0x40	; 64
 896:	b0 e0       	ldi	r27, 0x00	; 0
 898:	e0 e4       	ldi	r30, 0x40	; 64
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	80 81       	ld	r24, Z
 89e:	88 60       	ori	r24, 0x08	; 8
 8a0:	8c 93       	st	X, r24
	}
	return Ok;
 8a2:	81 e0       	ldi	r24, 0x01	; 1
 8a4:	8d 83       	std	Y+5, r24	; 0x05
 8a6:	8d 81       	ldd	r24, Y+5	; 0x05
}
 8a8:	0f 90       	pop	r0
 8aa:	0f 90       	pop	r0
 8ac:	0f 90       	pop	r0
 8ae:	0f 90       	pop	r0
 8b0:	0f 90       	pop	r0
 8b2:	cf 91       	pop	r28
 8b4:	df 91       	pop	r29
 8b6:	08 95       	ret

000008b8 <__udivmodsi4>:
 8b8:	a1 e2       	ldi	r26, 0x21	; 33
 8ba:	1a 2e       	mov	r1, r26
 8bc:	aa 1b       	sub	r26, r26
 8be:	bb 1b       	sub	r27, r27
 8c0:	fd 01       	movw	r30, r26
 8c2:	0d c0       	rjmp	.+26     	; 0x8de <__udivmodsi4_ep>

000008c4 <__udivmodsi4_loop>:
 8c4:	aa 1f       	adc	r26, r26
 8c6:	bb 1f       	adc	r27, r27
 8c8:	ee 1f       	adc	r30, r30
 8ca:	ff 1f       	adc	r31, r31
 8cc:	a2 17       	cp	r26, r18
 8ce:	b3 07       	cpc	r27, r19
 8d0:	e4 07       	cpc	r30, r20
 8d2:	f5 07       	cpc	r31, r21
 8d4:	20 f0       	brcs	.+8      	; 0x8de <__udivmodsi4_ep>
 8d6:	a2 1b       	sub	r26, r18
 8d8:	b3 0b       	sbc	r27, r19
 8da:	e4 0b       	sbc	r30, r20
 8dc:	f5 0b       	sbc	r31, r21

000008de <__udivmodsi4_ep>:
 8de:	66 1f       	adc	r22, r22
 8e0:	77 1f       	adc	r23, r23
 8e2:	88 1f       	adc	r24, r24
 8e4:	99 1f       	adc	r25, r25
 8e6:	1a 94       	dec	r1
 8e8:	69 f7       	brne	.-38     	; 0x8c4 <__udivmodsi4_loop>
 8ea:	60 95       	com	r22
 8ec:	70 95       	com	r23
 8ee:	80 95       	com	r24
 8f0:	90 95       	com	r25
 8f2:	9b 01       	movw	r18, r22
 8f4:	ac 01       	movw	r20, r24
 8f6:	bd 01       	movw	r22, r26
 8f8:	cf 01       	movw	r24, r30
 8fa:	08 95       	ret

000008fc <_exit>:
 8fc:	f8 94       	cli

000008fe <__stop_program>:
 8fe:	ff cf       	rjmp	.-2      	; 0x8fe <__stop_program>
