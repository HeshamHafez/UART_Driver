
uart_receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000c58  00000cec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006a  0080006a  00000cf6  2**0
                  ALLOC
  3 .stab         000013ec  00000000  00000000  00000cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cf2  00000000  00000000  000020e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__vector_13>
  38:	0c 94 b8 02 	jmp	0x570	; 0x570 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	0f 92       	push	r0
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	19 82       	std	Y+1, r1	; 0x01
  9e:	88 e0       	ldi	r24, 0x08	; 8
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <DIO_SetPinDirection>
  a6:	89 e0       	ldi	r24, 0x09	; 9
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <DIO_SetPinDirection>
  ae:	8a e0       	ldi	r24, 0x0A	; 10
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <DIO_SetPinDirection>
  b6:	8b e0       	ldi	r24, 0x0B	; 11
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <DIO_SetPinDirection>
  be:	88 e0       	ldi	r24, 0x08	; 8
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	0e 94 93 00 	call	0x126	; 0x126 <DIO_WritePin>
  c6:	89 e0       	ldi	r24, 0x09	; 9
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	0e 94 93 00 	call	0x126	; 0x126 <DIO_WritePin>
  ce:	8a e0       	ldi	r24, 0x0A	; 10
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	0e 94 93 00 	call	0x126	; 0x126 <DIO_WritePin>
  d6:	8b e0       	ldi	r24, 0x0B	; 11
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	0e 94 93 00 	call	0x126	; 0x126 <DIO_WritePin>
  de:	8a e1       	ldi	r24, 0x1A	; 26
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <DIO_SetPinDirection>
  e6:	8c e1       	ldi	r24, 0x1C	; 28
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <DIO_SetPinDirection>
  ee:	8a e1       	ldi	r24, 0x1A	; 26
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	0e 94 93 00 	call	0x126	; 0x126 <DIO_WritePin>
  f6:	8c e1       	ldi	r24, 0x1C	; 28
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	0e 94 93 00 	call	0x126	; 0x126 <DIO_WritePin>
  fe:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <UART_Init>
 102:	0e 94 60 05 	call	0xac0	; 0xac0 <UART_Start>
 106:	ce 01       	movw	r24, r28
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <UART_ReceiveChar>
 10e:	a8 e3       	ldi	r26, 0x38	; 56
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	e8 e3       	ldi	r30, 0x38	; 56
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	98 2f       	mov	r25, r24
 11a:	90 7f       	andi	r25, 0xF0	; 240
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	8f 70       	andi	r24, 0x0F	; 15
 120:	89 2b       	or	r24, r25
 122:	8c 93       	st	X, r24
 124:	f0 cf       	rjmp	.-32     	; 0x106 <main+0x74>

00000126 <DIO_WritePin>:
 */

#include"reg_file.h"

void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
 126:	df 93       	push	r29
 128:	cf 93       	push	r28
 12a:	00 d0       	rcall	.+0      	; 0x12c <DIO_WritePin+0x6>
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	89 83       	std	Y+1, r24	; 0x01
 132:	6a 83       	std	Y+2, r22	; 0x02
	if((PinNum >= PIN0) && (PinNum <= PIN7))
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	88 30       	cpi	r24, 0x08	; 8
 138:	60 f5       	brcc	.+88     	; 0x192 <DIO_WritePin+0x6c>
	{
		if(PinValue == 0)
 13a:	8a 81       	ldd	r24, Y+2	; 0x02
 13c:	88 23       	and	r24, r24
 13e:	a9 f4       	brne	.+42     	; 0x16a <DIO_WritePin+0x44>
		{
			CLEAR_BIT(DIO_PORTA,PinNum);
 140:	ab e3       	ldi	r26, 0x3B	; 59
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	eb e3       	ldi	r30, 0x3B	; 59
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	48 2f       	mov	r20, r24
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	28 2f       	mov	r18, r24
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 2e       	mov	r0, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_WritePin+0x38>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_WritePin+0x34>
 162:	80 95       	com	r24
 164:	84 23       	and	r24, r20
 166:	8c 93       	st	X, r24
 168:	b2 c0       	rjmp	.+356    	; 0x2ce <DIO_WritePin+0x1a8>
		}
		else
		{
			SET_BIT(DIO_PORTA,PinNum);
 16a:	ab e3       	ldi	r26, 0x3B	; 59
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	eb e3       	ldi	r30, 0x3B	; 59
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	48 2f       	mov	r20, r24
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	28 2f       	mov	r18, r24
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 2e       	mov	r0, r18
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_WritePin+0x62>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_WritePin+0x5e>
 18c:	84 2b       	or	r24, r20
 18e:	8c 93       	st	X, r24
 190:	9e c0       	rjmp	.+316    	; 0x2ce <DIO_WritePin+0x1a8>
		}
	}
	else if((PinNum >= PIN8) && (PinNum <= PIN15))
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	88 30       	cpi	r24, 0x08	; 8
 196:	90 f1       	brcs	.+100    	; 0x1fc <DIO_WritePin+0xd6>
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	80 31       	cpi	r24, 0x10	; 16
 19c:	78 f5       	brcc	.+94     	; 0x1fc <DIO_WritePin+0xd6>
	{
		PinNum = PinNum - 8;
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	88 50       	subi	r24, 0x08	; 8
 1a2:	89 83       	std	Y+1, r24	; 0x01
		if(PinValue == 0)
 1a4:	8a 81       	ldd	r24, Y+2	; 0x02
 1a6:	88 23       	and	r24, r24
 1a8:	a9 f4       	brne	.+42     	; 0x1d4 <DIO_WritePin+0xae>
		{
			CLEAR_BIT(DIO_PORTB,PinNum);
 1aa:	a8 e3       	ldi	r26, 0x38	; 56
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	e8 e3       	ldi	r30, 0x38	; 56
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	48 2f       	mov	r20, r24
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	28 2f       	mov	r18, r24
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 2e       	mov	r0, r18
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_WritePin+0xa2>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_WritePin+0x9e>
 1cc:	80 95       	com	r24
 1ce:	84 23       	and	r24, r20
 1d0:	8c 93       	st	X, r24
 1d2:	7d c0       	rjmp	.+250    	; 0x2ce <DIO_WritePin+0x1a8>
		}
		else
		{
			SET_BIT(DIO_PORTB,PinNum);
 1d4:	a8 e3       	ldi	r26, 0x38	; 56
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	e8 e3       	ldi	r30, 0x38	; 56
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 2e       	mov	r0, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_WritePin+0xcc>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_WritePin+0xc8>
 1f6:	84 2b       	or	r24, r20
 1f8:	8c 93       	st	X, r24
 1fa:	69 c0       	rjmp	.+210    	; 0x2ce <DIO_WritePin+0x1a8>
		}

	}
	else if((PinNum >= PIN16) && (PinNum <= PIN23))
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	80 31       	cpi	r24, 0x10	; 16
 200:	90 f1       	brcs	.+100    	; 0x266 <DIO_WritePin+0x140>
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	88 31       	cpi	r24, 0x18	; 24
 206:	78 f5       	brcc	.+94     	; 0x266 <DIO_WritePin+0x140>
	{
		PinNum = PinNum - 16;
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	80 51       	subi	r24, 0x10	; 16
 20c:	89 83       	std	Y+1, r24	; 0x01
		if(PinValue == 0)
 20e:	8a 81       	ldd	r24, Y+2	; 0x02
 210:	88 23       	and	r24, r24
 212:	a9 f4       	brne	.+42     	; 0x23e <DIO_WritePin+0x118>
		{
			CLEAR_BIT(DIO_PORTC,PinNum);
 214:	a5 e3       	ldi	r26, 0x35	; 53
 216:	b0 e0       	ldi	r27, 0x00	; 0
 218:	e5 e3       	ldi	r30, 0x35	; 53
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	48 2f       	mov	r20, r24
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	28 2f       	mov	r18, r24
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 2e       	mov	r0, r18
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_WritePin+0x10c>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	0a 94       	dec	r0
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_WritePin+0x108>
 236:	80 95       	com	r24
 238:	84 23       	and	r24, r20
 23a:	8c 93       	st	X, r24
 23c:	48 c0       	rjmp	.+144    	; 0x2ce <DIO_WritePin+0x1a8>
		}
		else
		{
			SET_BIT(DIO_PORTC,PinNum);
 23e:	a5 e3       	ldi	r26, 0x35	; 53
 240:	b0 e0       	ldi	r27, 0x00	; 0
 242:	e5 e3       	ldi	r30, 0x35	; 53
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	48 2f       	mov	r20, r24
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	28 2f       	mov	r18, r24
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 2e       	mov	r0, r18
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_WritePin+0x136>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	0a 94       	dec	r0
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_WritePin+0x132>
 260:	84 2b       	or	r24, r20
 262:	8c 93       	st	X, r24
 264:	34 c0       	rjmp	.+104    	; 0x2ce <DIO_WritePin+0x1a8>
		}

	}
	else if((PinNum >= PIN24) && (PinNum <= PIN31))
 266:	89 81       	ldd	r24, Y+1	; 0x01
 268:	88 31       	cpi	r24, 0x18	; 24
 26a:	88 f1       	brcs	.+98     	; 0x2ce <DIO_WritePin+0x1a8>
 26c:	89 81       	ldd	r24, Y+1	; 0x01
 26e:	80 32       	cpi	r24, 0x20	; 32
 270:	70 f5       	brcc	.+92     	; 0x2ce <DIO_WritePin+0x1a8>
	{
		PinNum = PinNum - 24;
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	88 51       	subi	r24, 0x18	; 24
 276:	89 83       	std	Y+1, r24	; 0x01
		if(PinValue == 0)
 278:	8a 81       	ldd	r24, Y+2	; 0x02
 27a:	88 23       	and	r24, r24
 27c:	a9 f4       	brne	.+42     	; 0x2a8 <DIO_WritePin+0x182>
		{
			CLEAR_BIT(DIO_PORTD,PinNum);
 27e:	a2 e3       	ldi	r26, 0x32	; 50
 280:	b0 e0       	ldi	r27, 0x00	; 0
 282:	e2 e3       	ldi	r30, 0x32	; 50
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	48 2f       	mov	r20, r24
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	28 2f       	mov	r18, r24
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 2e       	mov	r0, r18
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_WritePin+0x176>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	0a 94       	dec	r0
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_WritePin+0x172>
 2a0:	80 95       	com	r24
 2a2:	84 23       	and	r24, r20
 2a4:	8c 93       	st	X, r24
 2a6:	13 c0       	rjmp	.+38     	; 0x2ce <DIO_WritePin+0x1a8>
		}
		else
		{
			SET_BIT(DIO_PORTD,PinNum);
 2a8:	a2 e3       	ldi	r26, 0x32	; 50
 2aa:	b0 e0       	ldi	r27, 0x00	; 0
 2ac:	e2 e3       	ldi	r30, 0x32	; 50
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	48 2f       	mov	r20, r24
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	28 2f       	mov	r18, r24
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 2e       	mov	r0, r18
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_WritePin+0x1a0>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	0a 94       	dec	r0
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_WritePin+0x19c>
 2ca:	84 2b       	or	r24, r20
 2cc:	8c 93       	st	X, r24
		}

	}
}
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	cf 91       	pop	r28
 2d4:	df 91       	pop	r29
 2d6:	08 95       	ret

000002d8 <DIO_ReadPin>:

uint8 DIO_ReadPin(uint8 PinNum)
{
 2d8:	df 93       	push	r29
 2da:	cf 93       	push	r28
 2dc:	00 d0       	rcall	.+0      	; 0x2de <DIO_ReadPin+0x6>
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
 2e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value;
	if((PinNum >= PIN0) && (PinNum <= PIN7))
 2e4:	8a 81       	ldd	r24, Y+2	; 0x02
 2e6:	88 30       	cpi	r24, 0x08	; 8
 2e8:	90 f4       	brcc	.+36     	; 0x30e <DIO_ReadPin+0x36>
	{
		value = IS_BIT_SET(DIO_PINA,PinNum);
 2ea:	e9 e3       	ldi	r30, 0x39	; 57
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	48 2f       	mov	r20, r24
 2f2:	8a 81       	ldd	r24, Y+2	; 0x02
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 2e       	mov	r0, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_ReadPin+0x2c>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_ReadPin+0x28>
 308:	84 23       	and	r24, r20
 30a:	89 83       	std	Y+1, r24	; 0x01
 30c:	50 c0       	rjmp	.+160    	; 0x3ae <DIO_ReadPin+0xd6>
	}

	else if((PinNum >= PIN8) && (PinNum <= PIN15))
 30e:	8a 81       	ldd	r24, Y+2	; 0x02
 310:	88 30       	cpi	r24, 0x08	; 8
 312:	c0 f0       	brcs	.+48     	; 0x344 <DIO_ReadPin+0x6c>
 314:	8a 81       	ldd	r24, Y+2	; 0x02
 316:	80 31       	cpi	r24, 0x10	; 16
 318:	a8 f4       	brcc	.+42     	; 0x344 <DIO_ReadPin+0x6c>
	{
		PinNum = PinNum -8;
 31a:	8a 81       	ldd	r24, Y+2	; 0x02
 31c:	88 50       	subi	r24, 0x08	; 8
 31e:	8a 83       	std	Y+2, r24	; 0x02
		value = IS_BIT_SET(DIO_PINB,PinNum);
 320:	e6 e3       	ldi	r30, 0x36	; 54
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	48 2f       	mov	r20, r24
 328:	8a 81       	ldd	r24, Y+2	; 0x02
 32a:	28 2f       	mov	r18, r24
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 2e       	mov	r0, r18
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_ReadPin+0x62>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	0a 94       	dec	r0
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_ReadPin+0x5e>
 33e:	84 23       	and	r24, r20
 340:	89 83       	std	Y+1, r24	; 0x01
 342:	35 c0       	rjmp	.+106    	; 0x3ae <DIO_ReadPin+0xd6>

	}
	else if((PinNum >= PIN16) && (PinNum <= PIN23))
 344:	8a 81       	ldd	r24, Y+2	; 0x02
 346:	80 31       	cpi	r24, 0x10	; 16
 348:	c0 f0       	brcs	.+48     	; 0x37a <DIO_ReadPin+0xa2>
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	88 31       	cpi	r24, 0x18	; 24
 34e:	a8 f4       	brcc	.+42     	; 0x37a <DIO_ReadPin+0xa2>
	{
		PinNum = PinNum -16;
 350:	8a 81       	ldd	r24, Y+2	; 0x02
 352:	80 51       	subi	r24, 0x10	; 16
 354:	8a 83       	std	Y+2, r24	; 0x02
		value = IS_BIT_SET(DIO_PINC,PinNum);
 356:	e3 e3       	ldi	r30, 0x33	; 51
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	48 2f       	mov	r20, r24
 35e:	8a 81       	ldd	r24, Y+2	; 0x02
 360:	28 2f       	mov	r18, r24
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 2e       	mov	r0, r18
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_ReadPin+0x98>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	0a 94       	dec	r0
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_ReadPin+0x94>
 374:	84 23       	and	r24, r20
 376:	89 83       	std	Y+1, r24	; 0x01
 378:	1a c0       	rjmp	.+52     	; 0x3ae <DIO_ReadPin+0xd6>

	}
	else if((PinNum >= PIN24) && (PinNum <= PIN31))
 37a:	8a 81       	ldd	r24, Y+2	; 0x02
 37c:	88 31       	cpi	r24, 0x18	; 24
 37e:	b8 f0       	brcs	.+46     	; 0x3ae <DIO_ReadPin+0xd6>
 380:	8a 81       	ldd	r24, Y+2	; 0x02
 382:	80 32       	cpi	r24, 0x20	; 32
 384:	a0 f4       	brcc	.+40     	; 0x3ae <DIO_ReadPin+0xd6>
	{
		PinNum = PinNum -24;
 386:	8a 81       	ldd	r24, Y+2	; 0x02
 388:	88 51       	subi	r24, 0x18	; 24
 38a:	8a 83       	std	Y+2, r24	; 0x02
		value = IS_BIT_SET(DIO_PIND,PinNum);
 38c:	e0 e3       	ldi	r30, 0x30	; 48
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	48 2f       	mov	r20, r24
 394:	8a 81       	ldd	r24, Y+2	; 0x02
 396:	28 2f       	mov	r18, r24
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 2e       	mov	r0, r18
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_ReadPin+0xce>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	0a 94       	dec	r0
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_ReadPin+0xca>
 3aa:	84 23       	and	r24, r20
 3ac:	89 83       	std	Y+1, r24	; 0x01
	}

	if(value != 0)
 3ae:	89 81       	ldd	r24, Y+1	; 0x01
 3b0:	88 23       	and	r24, r24
 3b2:	11 f0       	breq	.+4      	; 0x3b8 <DIO_ReadPin+0xe0>
	{
		value = 1;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	89 83       	std	Y+1, r24	; 0x01
	}
	return value;
 3b8:	89 81       	ldd	r24, Y+1	; 0x01
}
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	cf 91       	pop	r28
 3c0:	df 91       	pop	r29
 3c2:	08 95       	ret

000003c4 <DIO_SetPinDirection>:

void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
 3c4:	df 93       	push	r29
 3c6:	cf 93       	push	r28
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <DIO_SetPinDirection+0x6>
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	89 83       	std	Y+1, r24	; 0x01
 3d0:	6a 83       	std	Y+2, r22	; 0x02
	if((PinNum >= PIN0) && (PinNum <= PIN7))
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
 3d4:	88 30       	cpi	r24, 0x08	; 8
 3d6:	58 f5       	brcc	.+86     	; 0x42e <DIO_SetPinDirection+0x6a>
	{
		if(PinDirection == 0)
 3d8:	8a 81       	ldd	r24, Y+2	; 0x02
 3da:	88 23       	and	r24, r24
 3dc:	a9 f4       	brne	.+42     	; 0x408 <DIO_SetPinDirection+0x44>
		{
			CLEAR_BIT(DIO_DDRA,PinNum);
 3de:	aa e3       	ldi	r26, 0x3A	; 58
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	ea e3       	ldi	r30, 0x3A	; 58
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	48 2f       	mov	r20, r24
 3ea:	89 81       	ldd	r24, Y+1	; 0x01
 3ec:	28 2f       	mov	r18, r24
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 2e       	mov	r0, r18
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_SetPinDirection+0x38>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_SetPinDirection+0x34>
 400:	80 95       	com	r24
 402:	84 23       	and	r24, r20
 404:	8c 93       	st	X, r24
 406:	13 c0       	rjmp	.+38     	; 0x42e <DIO_SetPinDirection+0x6a>
		}
		else
		{
			SET_BIT(DIO_DDRA,PinNum);
 408:	aa e3       	ldi	r26, 0x3A	; 58
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	ea e3       	ldi	r30, 0x3A	; 58
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	48 2f       	mov	r20, r24
 414:	89 81       	ldd	r24, Y+1	; 0x01
 416:	28 2f       	mov	r18, r24
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 2e       	mov	r0, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_SetPinDirection+0x62>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	0a 94       	dec	r0
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_SetPinDirection+0x5e>
 42a:	84 2b       	or	r24, r20
 42c:	8c 93       	st	X, r24
		}
	}
	if((PinNum >= PIN8) && (PinNum <= PIN15))
 42e:	89 81       	ldd	r24, Y+1	; 0x01
 430:	88 30       	cpi	r24, 0x08	; 8
 432:	88 f1       	brcs	.+98     	; 0x496 <DIO_SetPinDirection+0xd2>
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	80 31       	cpi	r24, 0x10	; 16
 438:	70 f5       	brcc	.+92     	; 0x496 <DIO_SetPinDirection+0xd2>
	{
		PinNum = PinNum -8;
 43a:	89 81       	ldd	r24, Y+1	; 0x01
 43c:	88 50       	subi	r24, 0x08	; 8
 43e:	89 83       	std	Y+1, r24	; 0x01
		if(PinDirection == 0)
 440:	8a 81       	ldd	r24, Y+2	; 0x02
 442:	88 23       	and	r24, r24
 444:	a9 f4       	brne	.+42     	; 0x470 <DIO_SetPinDirection+0xac>
		{
			CLEAR_BIT(DIO_DDRB,PinNum);
 446:	a7 e3       	ldi	r26, 0x37	; 55
 448:	b0 e0       	ldi	r27, 0x00	; 0
 44a:	e7 e3       	ldi	r30, 0x37	; 55
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	48 2f       	mov	r20, r24
 452:	89 81       	ldd	r24, Y+1	; 0x01
 454:	28 2f       	mov	r18, r24
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 2e       	mov	r0, r18
 45e:	02 c0       	rjmp	.+4      	; 0x464 <DIO_SetPinDirection+0xa0>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	0a 94       	dec	r0
 466:	e2 f7       	brpl	.-8      	; 0x460 <DIO_SetPinDirection+0x9c>
 468:	80 95       	com	r24
 46a:	84 23       	and	r24, r20
 46c:	8c 93       	st	X, r24
 46e:	13 c0       	rjmp	.+38     	; 0x496 <DIO_SetPinDirection+0xd2>
		}
		else
		{
			SET_BIT(DIO_DDRB,PinNum);
 470:	a7 e3       	ldi	r26, 0x37	; 55
 472:	b0 e0       	ldi	r27, 0x00	; 0
 474:	e7 e3       	ldi	r30, 0x37	; 55
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	48 2f       	mov	r20, r24
 47c:	89 81       	ldd	r24, Y+1	; 0x01
 47e:	28 2f       	mov	r18, r24
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 2e       	mov	r0, r18
 488:	02 c0       	rjmp	.+4      	; 0x48e <DIO_SetPinDirection+0xca>
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	0a 94       	dec	r0
 490:	e2 f7       	brpl	.-8      	; 0x48a <DIO_SetPinDirection+0xc6>
 492:	84 2b       	or	r24, r20
 494:	8c 93       	st	X, r24
		}
	}
	if((PinNum >= PIN16) && (PinNum <= PIN23))
 496:	89 81       	ldd	r24, Y+1	; 0x01
 498:	80 31       	cpi	r24, 0x10	; 16
 49a:	88 f1       	brcs	.+98     	; 0x4fe <DIO_SetPinDirection+0x13a>
 49c:	89 81       	ldd	r24, Y+1	; 0x01
 49e:	88 31       	cpi	r24, 0x18	; 24
 4a0:	70 f5       	brcc	.+92     	; 0x4fe <DIO_SetPinDirection+0x13a>
	{
		PinNum = PinNum - 16;
 4a2:	89 81       	ldd	r24, Y+1	; 0x01
 4a4:	80 51       	subi	r24, 0x10	; 16
 4a6:	89 83       	std	Y+1, r24	; 0x01
		if(PinDirection == 0)
 4a8:	8a 81       	ldd	r24, Y+2	; 0x02
 4aa:	88 23       	and	r24, r24
 4ac:	a9 f4       	brne	.+42     	; 0x4d8 <DIO_SetPinDirection+0x114>
		{
			CLEAR_BIT(DIO_DDRC,PinNum);
 4ae:	a4 e3       	ldi	r26, 0x34	; 52
 4b0:	b0 e0       	ldi	r27, 0x00	; 0
 4b2:	e4 e3       	ldi	r30, 0x34	; 52
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	80 81       	ld	r24, Z
 4b8:	48 2f       	mov	r20, r24
 4ba:	89 81       	ldd	r24, Y+1	; 0x01
 4bc:	28 2f       	mov	r18, r24
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	02 2e       	mov	r0, r18
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_SetPinDirection+0x108>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	0a 94       	dec	r0
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_SetPinDirection+0x104>
 4d0:	80 95       	com	r24
 4d2:	84 23       	and	r24, r20
 4d4:	8c 93       	st	X, r24
 4d6:	13 c0       	rjmp	.+38     	; 0x4fe <DIO_SetPinDirection+0x13a>
		}
		else
		{
			SET_BIT(DIO_DDRC,PinNum);
 4d8:	a4 e3       	ldi	r26, 0x34	; 52
 4da:	b0 e0       	ldi	r27, 0x00	; 0
 4dc:	e4 e3       	ldi	r30, 0x34	; 52
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	80 81       	ld	r24, Z
 4e2:	48 2f       	mov	r20, r24
 4e4:	89 81       	ldd	r24, Y+1	; 0x01
 4e6:	28 2f       	mov	r18, r24
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	02 2e       	mov	r0, r18
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_SetPinDirection+0x132>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	0a 94       	dec	r0
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_SetPinDirection+0x12e>
 4fa:	84 2b       	or	r24, r20
 4fc:	8c 93       	st	X, r24
		}
	}
	if((PinNum >= PIN24) && (PinNum <= PIN31))
 4fe:	89 81       	ldd	r24, Y+1	; 0x01
 500:	88 31       	cpi	r24, 0x18	; 24
 502:	88 f1       	brcs	.+98     	; 0x566 <DIO_SetPinDirection+0x1a2>
 504:	89 81       	ldd	r24, Y+1	; 0x01
 506:	80 32       	cpi	r24, 0x20	; 32
 508:	70 f5       	brcc	.+92     	; 0x566 <DIO_SetPinDirection+0x1a2>
	{
		PinNum = PinNum - 24;
 50a:	89 81       	ldd	r24, Y+1	; 0x01
 50c:	88 51       	subi	r24, 0x18	; 24
 50e:	89 83       	std	Y+1, r24	; 0x01
		if(PinDirection == 0)
 510:	8a 81       	ldd	r24, Y+2	; 0x02
 512:	88 23       	and	r24, r24
 514:	a9 f4       	brne	.+42     	; 0x540 <DIO_SetPinDirection+0x17c>
		{
			CLEAR_BIT(DIO_DDRD,PinNum);
 516:	a1 e3       	ldi	r26, 0x31	; 49
 518:	b0 e0       	ldi	r27, 0x00	; 0
 51a:	e1 e3       	ldi	r30, 0x31	; 49
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	48 2f       	mov	r20, r24
 522:	89 81       	ldd	r24, Y+1	; 0x01
 524:	28 2f       	mov	r18, r24
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	02 2e       	mov	r0, r18
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_SetPinDirection+0x170>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	0a 94       	dec	r0
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_SetPinDirection+0x16c>
 538:	80 95       	com	r24
 53a:	84 23       	and	r24, r20
 53c:	8c 93       	st	X, r24
 53e:	13 c0       	rjmp	.+38     	; 0x566 <DIO_SetPinDirection+0x1a2>
		}
		else
		{
			SET_BIT(DIO_DDRD,PinNum);
 540:	a1 e3       	ldi	r26, 0x31	; 49
 542:	b0 e0       	ldi	r27, 0x00	; 0
 544:	e1 e3       	ldi	r30, 0x31	; 49
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 81       	ld	r24, Z
 54a:	48 2f       	mov	r20, r24
 54c:	89 81       	ldd	r24, Y+1	; 0x01
 54e:	28 2f       	mov	r18, r24
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	02 2e       	mov	r0, r18
 558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_SetPinDirection+0x19a>
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	0a 94       	dec	r0
 560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_SetPinDirection+0x196>
 562:	84 2b       	or	r24, r20
 564:	8c 93       	st	X, r24
		}
	}

}
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	cf 91       	pop	r28
 56c:	df 91       	pop	r29
 56e:	08 95       	ret

00000570 <__vector_14>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(USART_UDRE_vect)
{
 570:	1f 92       	push	r1
 572:	0f 92       	push	r0
 574:	0f b6       	in	r0, 0x3f	; 63
 576:	0f 92       	push	r0
 578:	11 24       	eor	r1, r1
 57a:	8f 93       	push	r24
 57c:	ef 93       	push	r30
 57e:	ff 93       	push	r31
 580:	df 93       	push	r29
 582:	cf 93       	push	r28
 584:	cd b7       	in	r28, 0x3d	; 61
 586:	de b7       	in	r29, 0x3e	; 62
	if(g_flag != LOW)
 588:	80 91 6a 00 	lds	r24, 0x006A
 58c:	88 23       	and	r24, r24
 58e:	51 f0       	breq	.+20     	; 0x5a4 <__vector_14+0x34>
	{
		UART_UDR = g_flag;
 590:	ec e2       	ldi	r30, 0x2C	; 44
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	80 91 6a 00 	lds	r24, 0x006A
 598:	80 83       	st	Z, r24
		g_index++ ;
 59a:	80 91 6b 00 	lds	r24, 0x006B
 59e:	8f 5f       	subi	r24, 0xFF	; 255
 5a0:	80 93 6b 00 	sts	0x006B, r24
	}
}
 5a4:	cf 91       	pop	r28
 5a6:	df 91       	pop	r29
 5a8:	ff 91       	pop	r31
 5aa:	ef 91       	pop	r30
 5ac:	8f 91       	pop	r24
 5ae:	0f 90       	pop	r0
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	0f 90       	pop	r0
 5b4:	1f 90       	pop	r1
 5b6:	18 95       	reti

000005b8 <__vector_13>:


ISR(USART_RXC_vect)
{
 5b8:	1f 92       	push	r1
 5ba:	0f 92       	push	r0
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	0f 92       	push	r0
 5c0:	11 24       	eor	r1, r1
 5c2:	8f 93       	push	r24
 5c4:	df 93       	push	r29
 5c6:	cf 93       	push	r28
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62
	g_RxFlag = HIGH;
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	80 93 6c 00 	sts	0x006C, r24
}
 5d2:	cf 91       	pop	r28
 5d4:	df 91       	pop	r29
 5d6:	8f 91       	pop	r24
 5d8:	0f 90       	pop	r0
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	0f 90       	pop	r0
 5de:	1f 90       	pop	r1
 5e0:	18 95       	reti

000005e2 <UART_Init>:
 *
 * Return:			Status to check function execution
 *******************************************************************************/

Status UART_Init(void)
{
 5e2:	df 93       	push	r29
 5e4:	cf 93       	push	r28
 5e6:	00 d0       	rcall	.+0      	; 0x5e8 <UART_Init+0x6>
 5e8:	0f 92       	push	r0
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
	uint16 UART_UBRR = LOW;
 5ee:	1a 82       	std	Y+2, r1	; 0x02
 5f0:	19 82       	std	Y+1, r1	; 0x01
	if(UART_Config.DoubleSpeed == UART_DoubleSpeedDisable)
 5f2:	80 91 62 00 	lds	r24, 0x0062
 5f6:	88 23       	and	r24, r24
 5f8:	71 f5       	brne	.+92     	; 0x656 <UART_Init+0x74>
	{
		CLEAR_BIT(UART_UCSRA,UART_U2X);
 5fa:	ab e2       	ldi	r26, 0x2B	; 43
 5fc:	b0 e0       	ldi	r27, 0x00	; 0
 5fe:	eb e2       	ldi	r30, 0x2B	; 43
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	80 81       	ld	r24, Z
 604:	8d 7f       	andi	r24, 0xFD	; 253
 606:	8c 93       	st	X, r24
		UART_UBRR = (((F_CPU / (UART_Config.baud_rate * 16UL))) - 1u);
 608:	80 91 60 00 	lds	r24, 0x0060
 60c:	90 91 61 00 	lds	r25, 0x0061
 610:	cc 01       	movw	r24, r24
 612:	a0 e0       	ldi	r26, 0x00	; 0
 614:	b0 e0       	ldi	r27, 0x00	; 0
 616:	88 0f       	add	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	aa 1f       	adc	r26, r26
 61c:	bb 1f       	adc	r27, r27
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	aa 1f       	adc	r26, r26
 624:	bb 1f       	adc	r27, r27
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	aa 1f       	adc	r26, r26
 62c:	bb 1f       	adc	r27, r27
 62e:	88 0f       	add	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	aa 1f       	adc	r26, r26
 634:	bb 1f       	adc	r27, r27
 636:	9c 01       	movw	r18, r24
 638:	ad 01       	movw	r20, r26
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	92 e1       	ldi	r25, 0x12	; 18
 63e:	aa e7       	ldi	r26, 0x7A	; 122
 640:	b0 e0       	ldi	r27, 0x00	; 0
 642:	bc 01       	movw	r22, r24
 644:	cd 01       	movw	r24, r26
 646:	0e 94 08 06 	call	0xc10	; 0xc10 <__udivmodsi4>
 64a:	da 01       	movw	r26, r20
 64c:	c9 01       	movw	r24, r18
 64e:	01 97       	sbiw	r24, 0x01	; 1
 650:	9a 83       	std	Y+2, r25	; 0x02
 652:	89 83       	std	Y+1, r24	; 0x01
 654:	30 c0       	rjmp	.+96     	; 0x6b6 <UART_Init+0xd4>
	}
	else if(UART_Config.DoubleSpeed == UART_DoubleSpeedEn)
 656:	80 91 62 00 	lds	r24, 0x0062
 65a:	81 30       	cpi	r24, 0x01	; 1
 65c:	51 f5       	brne	.+84     	; 0x6b2 <UART_Init+0xd0>
	{
		SET_BIT(UART_UCSRA,UART_U2X);
 65e:	ab e2       	ldi	r26, 0x2B	; 43
 660:	b0 e0       	ldi	r27, 0x00	; 0
 662:	eb e2       	ldi	r30, 0x2B	; 43
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	80 81       	ld	r24, Z
 668:	82 60       	ori	r24, 0x02	; 2
 66a:	8c 93       	st	X, r24
		UART_UBRR = (((F_CPU / (UART_Config.baud_rate * 8UL))) - 1u);
 66c:	80 91 60 00 	lds	r24, 0x0060
 670:	90 91 61 00 	lds	r25, 0x0061
 674:	cc 01       	movw	r24, r24
 676:	a0 e0       	ldi	r26, 0x00	; 0
 678:	b0 e0       	ldi	r27, 0x00	; 0
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	aa 1f       	adc	r26, r26
 680:	bb 1f       	adc	r27, r27
 682:	88 0f       	add	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	aa 1f       	adc	r26, r26
 688:	bb 1f       	adc	r27, r27
 68a:	88 0f       	add	r24, r24
 68c:	99 1f       	adc	r25, r25
 68e:	aa 1f       	adc	r26, r26
 690:	bb 1f       	adc	r27, r27
 692:	9c 01       	movw	r18, r24
 694:	ad 01       	movw	r20, r26
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	92 e1       	ldi	r25, 0x12	; 18
 69a:	aa e7       	ldi	r26, 0x7A	; 122
 69c:	b0 e0       	ldi	r27, 0x00	; 0
 69e:	bc 01       	movw	r22, r24
 6a0:	cd 01       	movw	r24, r26
 6a2:	0e 94 08 06 	call	0xc10	; 0xc10 <__udivmodsi4>
 6a6:	da 01       	movw	r26, r20
 6a8:	c9 01       	movw	r24, r18
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	9a 83       	std	Y+2, r25	; 0x02
 6ae:	89 83       	std	Y+1, r24	; 0x01
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <UART_Init+0xd4>
	}
	else
	{
		return NotOk;
 6b2:	1b 82       	std	Y+3, r1	; 0x03
 6b4:	f1 c0       	rjmp	.+482    	; 0x898 <__stack+0x39>
	}

	/*clear to choose UBRRH*/
	CLEAR_BIT(UART_UCSRC,UART_URSEL);
 6b6:	a0 e4       	ldi	r26, 0x40	; 64
 6b8:	b0 e0       	ldi	r27, 0x00	; 0
 6ba:	e0 e4       	ldi	r30, 0x40	; 64
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	8f 77       	andi	r24, 0x7F	; 127
 6c2:	8c 93       	st	X, r24
	UART_UBRRL = (uint8)UART_UBRR;
 6c4:	e9 e2       	ldi	r30, 0x29	; 41
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	89 81       	ldd	r24, Y+1	; 0x01
 6ca:	80 83       	st	Z, r24
	UART_UBRRH = (uint8)(UART_UBRR >> 8u);
 6cc:	e0 e4       	ldi	r30, 0x40	; 64
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	89 81       	ldd	r24, Y+1	; 0x01
 6d2:	9a 81       	ldd	r25, Y+2	; 0x02
 6d4:	89 2f       	mov	r24, r25
 6d6:	99 27       	eor	r25, r25
 6d8:	80 83       	st	Z, r24
	SET_BIT(UART_UCSRC,UART_URSEL);
 6da:	a0 e4       	ldi	r26, 0x40	; 64
 6dc:	b0 e0       	ldi	r27, 0x00	; 0
 6de:	e0 e4       	ldi	r30, 0x40	; 64
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	80 81       	ld	r24, Z
 6e4:	80 68       	ori	r24, 0x80	; 128
 6e6:	8c 93       	st	X, r24
	/*set to choose UCSRC*/
	/*************************************************************************************/
	if(UART_Config.DataSize == Bit5)
 6e8:	80 91 66 00 	lds	r24, 0x0066
 6ec:	85 30       	cpi	r24, 0x05	; 5
 6ee:	b1 f4       	brne	.+44     	; 0x71c <UART_Init+0x13a>
	{
		CLEAR_BIT(UART_UCSRB,UART_UCSZ2);
 6f0:	aa e2       	ldi	r26, 0x2A	; 42
 6f2:	b0 e0       	ldi	r27, 0x00	; 0
 6f4:	ea e2       	ldi	r30, 0x2A	; 42
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	80 81       	ld	r24, Z
 6fa:	8b 7f       	andi	r24, 0xFB	; 251
 6fc:	8c 93       	st	X, r24
		CLEAR_BIT(UART_UCSRC,UART_UCSZ1);
 6fe:	a0 e4       	ldi	r26, 0x40	; 64
 700:	b0 e0       	ldi	r27, 0x00	; 0
 702:	e0 e4       	ldi	r30, 0x40	; 64
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	80 81       	ld	r24, Z
 708:	8b 7f       	andi	r24, 0xFB	; 251
 70a:	8c 93       	st	X, r24
		CLEAR_BIT(UART_UCSRC,UART_UCSZ0);
 70c:	a0 e4       	ldi	r26, 0x40	; 64
 70e:	b0 e0       	ldi	r27, 0x00	; 0
 710:	e0 e4       	ldi	r30, 0x40	; 64
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	80 81       	ld	r24, Z
 716:	8d 7f       	andi	r24, 0xFD	; 253
 718:	8c 93       	st	X, r24
 71a:	6a c0       	rjmp	.+212    	; 0x7f0 <UART_Init+0x20e>
	}
	else if(UART_Config.DataSize == Bit6)
 71c:	80 91 66 00 	lds	r24, 0x0066
 720:	86 30       	cpi	r24, 0x06	; 6
 722:	b1 f4       	brne	.+44     	; 0x750 <UART_Init+0x16e>
	{
		CLEAR_BIT(UART_UCSRB,UART_UCSZ2);
 724:	aa e2       	ldi	r26, 0x2A	; 42
 726:	b0 e0       	ldi	r27, 0x00	; 0
 728:	ea e2       	ldi	r30, 0x2A	; 42
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	80 81       	ld	r24, Z
 72e:	8b 7f       	andi	r24, 0xFB	; 251
 730:	8c 93       	st	X, r24
		CLEAR_BIT(UART_UCSRC,UART_UCSZ1);
 732:	a0 e4       	ldi	r26, 0x40	; 64
 734:	b0 e0       	ldi	r27, 0x00	; 0
 736:	e0 e4       	ldi	r30, 0x40	; 64
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	80 81       	ld	r24, Z
 73c:	8b 7f       	andi	r24, 0xFB	; 251
 73e:	8c 93       	st	X, r24
		SET_BIT(UART_UCSRC,UART_UCSZ0);
 740:	a0 e4       	ldi	r26, 0x40	; 64
 742:	b0 e0       	ldi	r27, 0x00	; 0
 744:	e0 e4       	ldi	r30, 0x40	; 64
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	80 81       	ld	r24, Z
 74a:	82 60       	ori	r24, 0x02	; 2
 74c:	8c 93       	st	X, r24
 74e:	50 c0       	rjmp	.+160    	; 0x7f0 <UART_Init+0x20e>
	}
	else if(UART_Config.DataSize == Bit7)
 750:	80 91 66 00 	lds	r24, 0x0066
 754:	87 30       	cpi	r24, 0x07	; 7
 756:	b1 f4       	brne	.+44     	; 0x784 <UART_Init+0x1a2>
	{
		CLEAR_BIT(UART_UCSRB,UART_UCSZ2);
 758:	aa e2       	ldi	r26, 0x2A	; 42
 75a:	b0 e0       	ldi	r27, 0x00	; 0
 75c:	ea e2       	ldi	r30, 0x2A	; 42
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	80 81       	ld	r24, Z
 762:	8b 7f       	andi	r24, 0xFB	; 251
 764:	8c 93       	st	X, r24
		SET_BIT(UART_UCSRC,UART_UCSZ1);
 766:	a0 e4       	ldi	r26, 0x40	; 64
 768:	b0 e0       	ldi	r27, 0x00	; 0
 76a:	e0 e4       	ldi	r30, 0x40	; 64
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	80 81       	ld	r24, Z
 770:	84 60       	ori	r24, 0x04	; 4
 772:	8c 93       	st	X, r24
		CLEAR_BIT(UART_UCSRC,UART_UCSZ0);
 774:	a0 e4       	ldi	r26, 0x40	; 64
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	e0 e4       	ldi	r30, 0x40	; 64
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	80 81       	ld	r24, Z
 77e:	8d 7f       	andi	r24, 0xFD	; 253
 780:	8c 93       	st	X, r24
 782:	36 c0       	rjmp	.+108    	; 0x7f0 <UART_Init+0x20e>
	}
	else if(UART_Config.DataSize == Bit8)
 784:	80 91 66 00 	lds	r24, 0x0066
 788:	88 30       	cpi	r24, 0x08	; 8
 78a:	b1 f4       	brne	.+44     	; 0x7b8 <UART_Init+0x1d6>
	{
		CLEAR_BIT(UART_UCSRB,UART_UCSZ2);
 78c:	aa e2       	ldi	r26, 0x2A	; 42
 78e:	b0 e0       	ldi	r27, 0x00	; 0
 790:	ea e2       	ldi	r30, 0x2A	; 42
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	80 81       	ld	r24, Z
 796:	8b 7f       	andi	r24, 0xFB	; 251
 798:	8c 93       	st	X, r24
		SET_BIT(UART_UCSRC,UART_UCSZ1);
 79a:	a0 e4       	ldi	r26, 0x40	; 64
 79c:	b0 e0       	ldi	r27, 0x00	; 0
 79e:	e0 e4       	ldi	r30, 0x40	; 64
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	80 81       	ld	r24, Z
 7a4:	84 60       	ori	r24, 0x04	; 4
 7a6:	8c 93       	st	X, r24
		SET_BIT(UART_UCSRC,UART_UCSZ0);
 7a8:	a0 e4       	ldi	r26, 0x40	; 64
 7aa:	b0 e0       	ldi	r27, 0x00	; 0
 7ac:	e0 e4       	ldi	r30, 0x40	; 64
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	80 81       	ld	r24, Z
 7b2:	82 60       	ori	r24, 0x02	; 2
 7b4:	8c 93       	st	X, r24
 7b6:	1c c0       	rjmp	.+56     	; 0x7f0 <UART_Init+0x20e>
	}
	else if(UART_Config.DataSize == Bit9)
 7b8:	80 91 66 00 	lds	r24, 0x0066
 7bc:	89 30       	cpi	r24, 0x09	; 9
 7be:	b1 f4       	brne	.+44     	; 0x7ec <UART_Init+0x20a>
	{
		SET_BIT(UART_UCSRB,UART_UCSZ2);
 7c0:	aa e2       	ldi	r26, 0x2A	; 42
 7c2:	b0 e0       	ldi	r27, 0x00	; 0
 7c4:	ea e2       	ldi	r30, 0x2A	; 42
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	80 81       	ld	r24, Z
 7ca:	84 60       	ori	r24, 0x04	; 4
 7cc:	8c 93       	st	X, r24
		SET_BIT(UART_UCSRC,UART_UCSZ1);
 7ce:	a0 e4       	ldi	r26, 0x40	; 64
 7d0:	b0 e0       	ldi	r27, 0x00	; 0
 7d2:	e0 e4       	ldi	r30, 0x40	; 64
 7d4:	f0 e0       	ldi	r31, 0x00	; 0
 7d6:	80 81       	ld	r24, Z
 7d8:	84 60       	ori	r24, 0x04	; 4
 7da:	8c 93       	st	X, r24
		SET_BIT(UART_UCSRC,UART_UCSZ0);
 7dc:	a0 e4       	ldi	r26, 0x40	; 64
 7de:	b0 e0       	ldi	r27, 0x00	; 0
 7e0:	e0 e4       	ldi	r30, 0x40	; 64
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	80 81       	ld	r24, Z
 7e6:	82 60       	ori	r24, 0x02	; 2
 7e8:	8c 93       	st	X, r24
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <UART_Init+0x20e>
	}
	else
	{
		return NotOk;
 7ec:	1b 82       	std	Y+3, r1	; 0x03
 7ee:	54 c0       	rjmp	.+168    	; 0x898 <__stack+0x39>
	}

	/*********************************************************************************/
	if(UART_Config.Parity == UART_ParityDisabled)
 7f0:	80 91 67 00 	lds	r24, 0x0067
 7f4:	88 23       	and	r24, r24
 7f6:	79 f4       	brne	.+30     	; 0x816 <UART_Init+0x234>
	{
		CLEAR_BIT(UART_UCSRC,UART_UPM0);
 7f8:	a0 e4       	ldi	r26, 0x40	; 64
 7fa:	b0 e0       	ldi	r27, 0x00	; 0
 7fc:	e0 e4       	ldi	r30, 0x40	; 64
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	80 81       	ld	r24, Z
 802:	8f 7e       	andi	r24, 0xEF	; 239
 804:	8c 93       	st	X, r24
		CLEAR_BIT(UART_UCSRC,UART_UPM1);
 806:	a0 e4       	ldi	r26, 0x40	; 64
 808:	b0 e0       	ldi	r27, 0x00	; 0
 80a:	e0 e4       	ldi	r30, 0x40	; 64
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	80 81       	ld	r24, Z
 810:	8f 7d       	andi	r24, 0xDF	; 223
 812:	8c 93       	st	X, r24
 814:	28 c0       	rjmp	.+80     	; 0x866 <__stack+0x7>
	}
	else if(UART_Config.Parity == UART_ParityOdd)
 816:	80 91 67 00 	lds	r24, 0x0067
 81a:	81 30       	cpi	r24, 0x01	; 1
 81c:	79 f4       	brne	.+30     	; 0x83c <UART_Init+0x25a>
	{
		SET_BIT(UART_UCSRC,UART_UPM0);
 81e:	a0 e4       	ldi	r26, 0x40	; 64
 820:	b0 e0       	ldi	r27, 0x00	; 0
 822:	e0 e4       	ldi	r30, 0x40	; 64
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	80 81       	ld	r24, Z
 828:	80 61       	ori	r24, 0x10	; 16
 82a:	8c 93       	st	X, r24
		SET_BIT(UART_UCSRC,UART_UPM1);
 82c:	a0 e4       	ldi	r26, 0x40	; 64
 82e:	b0 e0       	ldi	r27, 0x00	; 0
 830:	e0 e4       	ldi	r30, 0x40	; 64
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	80 81       	ld	r24, Z
 836:	80 62       	ori	r24, 0x20	; 32
 838:	8c 93       	st	X, r24
 83a:	15 c0       	rjmp	.+42     	; 0x866 <__stack+0x7>
	}
	else if(UART_Config.Parity == UART_ParityEven)
 83c:	80 91 67 00 	lds	r24, 0x0067
 840:	82 30       	cpi	r24, 0x02	; 2
 842:	79 f4       	brne	.+30     	; 0x862 <__stack+0x3>
	{
		CLEAR_BIT(UART_UCSRC,UART_UPM0);
 844:	a0 e4       	ldi	r26, 0x40	; 64
 846:	b0 e0       	ldi	r27, 0x00	; 0
 848:	e0 e4       	ldi	r30, 0x40	; 64
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	80 81       	ld	r24, Z
 84e:	8f 7e       	andi	r24, 0xEF	; 239
 850:	8c 93       	st	X, r24
		SET_BIT(UART_UCSRC,UART_UPM1);
 852:	a0 e4       	ldi	r26, 0x40	; 64
 854:	b0 e0       	ldi	r27, 0x00	; 0
 856:	e0 e4       	ldi	r30, 0x40	; 64
 858:	f0 e0       	ldi	r31, 0x00	; 0
 85a:	80 81       	ld	r24, Z
 85c:	80 62       	ori	r24, 0x20	; 32
 85e:	8c 93       	st	X, r24
 860:	02 c0       	rjmp	.+4      	; 0x866 <__stack+0x7>
	}
	else
	{
		return NotOk;
 862:	1b 82       	std	Y+3, r1	; 0x03
 864:	19 c0       	rjmp	.+50     	; 0x898 <__stack+0x39>
	}

	/*****************************************************************************/
	if(UART_Config.StopBits == UART_StopBit1)
 866:	80 91 68 00 	lds	r24, 0x0068
 86a:	81 30       	cpi	r24, 0x01	; 1
 86c:	41 f4       	brne	.+16     	; 0x87e <__stack+0x1f>
	{
		CLEAR_BIT(UART_UCSRC,UART_USBS);
 86e:	a0 e4       	ldi	r26, 0x40	; 64
 870:	b0 e0       	ldi	r27, 0x00	; 0
 872:	e0 e4       	ldi	r30, 0x40	; 64
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	80 81       	ld	r24, Z
 878:	87 7f       	andi	r24, 0xF7	; 247
 87a:	8c 93       	st	X, r24
 87c:	0b c0       	rjmp	.+22     	; 0x894 <__stack+0x35>
	}
	else if(UART_Config.StopBits == UART_StopBit2)
 87e:	80 91 68 00 	lds	r24, 0x0068
 882:	82 30       	cpi	r24, 0x02	; 2
 884:	39 f4       	brne	.+14     	; 0x894 <__stack+0x35>
	{
		SET_BIT(UART_UCSRC,UART_USBS);
 886:	a0 e4       	ldi	r26, 0x40	; 64
 888:	b0 e0       	ldi	r27, 0x00	; 0
 88a:	e0 e4       	ldi	r30, 0x40	; 64
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	80 81       	ld	r24, Z
 890:	88 60       	ori	r24, 0x08	; 8
 892:	8c 93       	st	X, r24
	}
	return Ok;
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	8b 83       	std	Y+3, r24	; 0x03
 898:	8b 81       	ldd	r24, Y+3	; 0x03
}
 89a:	0f 90       	pop	r0
 89c:	0f 90       	pop	r0
 89e:	0f 90       	pop	r0
 8a0:	cf 91       	pop	r28
 8a2:	df 91       	pop	r29
 8a4:	08 95       	ret

000008a6 <UART_SendChar>:
 *
 * Return:			Status to check function execution
 *******************************************************************************/

Status UART_SendChar(const uint8 a_data)
{
 8a6:	df 93       	push	r29
 8a8:	cf 93       	push	r28
 8aa:	00 d0       	rcall	.+0      	; 0x8ac <UART_SendChar+0x6>
 8ac:	cd b7       	in	r28, 0x3d	; 61
 8ae:	de b7       	in	r29, 0x3e	; 62
 8b0:	89 83       	std	Y+1, r24	; 0x01

	if(UART_Config.Udr  == UART_UdrDisabled)
 8b2:	80 91 65 00 	lds	r24, 0x0065
 8b6:	88 23       	and	r24, r24
 8b8:	71 f4       	brne	.+28     	; 0x8d6 <UART_SendChar+0x30>
	{
		/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
		 * transmitting a new byte so wait until this flag is set to one */

		while(IS_BIT_CLEAR(UART_UCSRA,UART_UDRE)){}
 8ba:	eb e2       	ldi	r30, 0x2B	; 43
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	80 81       	ld	r24, Z
 8c0:	88 2f       	mov	r24, r24
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	80 72       	andi	r24, 0x20	; 32
 8c6:	90 70       	andi	r25, 0x00	; 0
 8c8:	00 97       	sbiw	r24, 0x00	; 0
 8ca:	b9 f3       	breq	.-18     	; 0x8ba <UART_SendChar+0x14>

		/* Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now */

		UART_UDR = a_data;
 8cc:	ec e2       	ldi	r30, 0x2C	; 44
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	89 81       	ldd	r24, Y+1	; 0x01
 8d2:	80 83       	st	Z, r24
 8d4:	0a c0       	rjmp	.+20     	; 0x8ea <UART_SendChar+0x44>
	}
	else if(UART_Config.Udr == UART_UdrEn)
 8d6:	80 91 65 00 	lds	r24, 0x0065
 8da:	81 30       	cpi	r24, 0x01	; 1
 8dc:	21 f4       	brne	.+8      	; 0x8e6 <UART_SendChar+0x40>
	{
		g_flag = a_data;
 8de:	89 81       	ldd	r24, Y+1	; 0x01
 8e0:	80 93 6a 00 	sts	0x006A, r24
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <UART_SendChar+0x44>
	}
	else
	{
		return NotOk;
 8e6:	1a 82       	std	Y+2, r1	; 0x02
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <UART_SendChar+0x48>
	}
	return Ok;
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	8a 83       	std	Y+2, r24	; 0x02
 8ee:	8a 81       	ldd	r24, Y+2	; 0x02
}
 8f0:	0f 90       	pop	r0
 8f2:	0f 90       	pop	r0
 8f4:	cf 91       	pop	r28
 8f6:	df 91       	pop	r29
 8f8:	08 95       	ret

000008fa <UART_ReceiveChar>:
 *
 * Return:			Status to check function execution
 *******************************************************************************/

Status UART_ReceiveChar(uint8 * a_data_ptr)
{
 8fa:	df 93       	push	r29
 8fc:	cf 93       	push	r28
 8fe:	00 d0       	rcall	.+0      	; 0x900 <UART_ReceiveChar+0x6>
 900:	0f 92       	push	r0
 902:	cd b7       	in	r28, 0x3d	; 61
 904:	de b7       	in	r29, 0x3e	; 62
 906:	9a 83       	std	Y+2, r25	; 0x02
 908:	89 83       	std	Y+1, r24	; 0x01
	if (UART_Config.RxInt == UART_RxIntDisabled)
 90a:	80 91 64 00 	lds	r24, 0x0064
 90e:	88 23       	and	r24, r24
 910:	61 f4       	brne	.+24     	; 0x92a <UART_ReceiveChar+0x30>
	{
		while(IS_BIT_CLEAR(UART_UCSRA,UART_RXC)){}
 912:	eb e2       	ldi	r30, 0x2B	; 43
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	80 81       	ld	r24, Z
 918:	88 23       	and	r24, r24
 91a:	dc f7       	brge	.-10     	; 0x912 <UART_ReceiveChar+0x18>

		*a_data_ptr = UDR;
 91c:	ec e2       	ldi	r30, 0x2C	; 44
 91e:	f0 e0       	ldi	r31, 0x00	; 0
 920:	80 81       	ld	r24, Z
 922:	e9 81       	ldd	r30, Y+1	; 0x01
 924:	fa 81       	ldd	r31, Y+2	; 0x02
 926:	80 83       	st	Z, r24
 928:	17 c0       	rjmp	.+46     	; 0x958 <UART_ReceiveChar+0x5e>
	}
	else if(UART_Config.RxInt == UART_RxIntEn)
 92a:	80 91 64 00 	lds	r24, 0x0064
 92e:	81 30       	cpi	r24, 0x01	; 1
 930:	89 f4       	brne	.+34     	; 0x954 <UART_ReceiveChar+0x5a>
	{
		if (g_RxFlag == 1)
 932:	80 91 6c 00 	lds	r24, 0x006C
 936:	81 30       	cpi	r24, 0x01	; 1
 938:	49 f4       	brne	.+18     	; 0x94c <UART_ReceiveChar+0x52>
		{
			*a_data_ptr = UDR;
 93a:	ec e2       	ldi	r30, 0x2C	; 44
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	80 81       	ld	r24, Z
 940:	e9 81       	ldd	r30, Y+1	; 0x01
 942:	fa 81       	ldd	r31, Y+2	; 0x02
 944:	80 83       	st	Z, r24
			g_RxFlag = LOW;
 946:	10 92 6c 00 	sts	0x006C, r1
 94a:	06 c0       	rjmp	.+12     	; 0x958 <UART_ReceiveChar+0x5e>
		}
		else
		{
			*a_data_ptr = LOW;
 94c:	e9 81       	ldd	r30, Y+1	; 0x01
 94e:	fa 81       	ldd	r31, Y+2	; 0x02
 950:	10 82       	st	Z, r1
 952:	02 c0       	rjmp	.+4      	; 0x958 <UART_ReceiveChar+0x5e>
		}
	}
	else
	{
		return NotOk;
 954:	1b 82       	std	Y+3, r1	; 0x03
 956:	02 c0       	rjmp	.+4      	; 0x95c <UART_ReceiveChar+0x62>
	}
	return Ok;
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	8b 83       	std	Y+3, r24	; 0x03
 95c:	8b 81       	ldd	r24, Y+3	; 0x03
}
 95e:	0f 90       	pop	r0
 960:	0f 90       	pop	r0
 962:	0f 90       	pop	r0
 964:	cf 91       	pop	r28
 966:	df 91       	pop	r29
 968:	08 95       	ret

0000096a <UART_Send>:
 * Notes:			you should add # after your string to transmit it
 * 					your string will not be transmitted if you don't add #.
 *******************************************************************************/

Status UART_Send(const uint8 * a_data_ptr)
{
 96a:	df 93       	push	r29
 96c:	cf 93       	push	r28
 96e:	00 d0       	rcall	.+0      	; 0x970 <UART_Send+0x6>
 970:	00 d0       	rcall	.+0      	; 0x972 <UART_Send+0x8>
 972:	cd b7       	in	r28, 0x3d	; 61
 974:	de b7       	in	r29, 0x3e	; 62
 976:	9b 83       	std	Y+3, r25	; 0x03
 978:	8a 83       	std	Y+2, r24	; 0x02
	uint8 index = LOW;
 97a:	19 82       	std	Y+1, r1	; 0x01
	if(UART_Config.Udr  == UART_UdrDisabled)
 97c:	80 91 65 00 	lds	r24, 0x0065
 980:	88 23       	and	r24, r24
 982:	d9 f4       	brne	.+54     	; 0x9ba <UART_Send+0x50>
 984:	0e c0       	rjmp	.+28     	; 0x9a2 <UART_Send+0x38>
	{
		while(a_data_ptr[index] != '\0')
		{
			UART_SendChar(a_data_ptr[index]);
 986:	89 81       	ldd	r24, Y+1	; 0x01
 988:	28 2f       	mov	r18, r24
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	8a 81       	ldd	r24, Y+2	; 0x02
 98e:	9b 81       	ldd	r25, Y+3	; 0x03
 990:	fc 01       	movw	r30, r24
 992:	e2 0f       	add	r30, r18
 994:	f3 1f       	adc	r31, r19
 996:	80 81       	ld	r24, Z
 998:	0e 94 53 04 	call	0x8a6	; 0x8a6 <UART_SendChar>
			index++;
 99c:	89 81       	ldd	r24, Y+1	; 0x01
 99e:	8f 5f       	subi	r24, 0xFF	; 255
 9a0:	89 83       	std	Y+1, r24	; 0x01
Status UART_Send(const uint8 * a_data_ptr)
{
	uint8 index = LOW;
	if(UART_Config.Udr  == UART_UdrDisabled)
	{
		while(a_data_ptr[index] != '\0')
 9a2:	89 81       	ldd	r24, Y+1	; 0x01
 9a4:	28 2f       	mov	r18, r24
 9a6:	30 e0       	ldi	r19, 0x00	; 0
 9a8:	8a 81       	ldd	r24, Y+2	; 0x02
 9aa:	9b 81       	ldd	r25, Y+3	; 0x03
 9ac:	fc 01       	movw	r30, r24
 9ae:	e2 0f       	add	r30, r18
 9b0:	f3 1f       	adc	r31, r19
 9b2:	80 81       	ld	r24, Z
 9b4:	88 23       	and	r24, r24
 9b6:	39 f7       	brne	.-50     	; 0x986 <UART_Send+0x1c>
 9b8:	22 c0       	rjmp	.+68     	; 0x9fe <UART_Send+0x94>
		{
			UART_SendChar(a_data_ptr[index]);
			index++;
		}
	}
	else if(UART_Config.Udr == UART_UdrEn)
 9ba:	80 91 65 00 	lds	r24, 0x0065
 9be:	81 30       	cpi	r24, 0x01	; 1
 9c0:	e1 f4       	brne	.+56     	; 0x9fa <UART_Send+0x90>
	{
		g_index = LOW;
 9c2:	10 92 6b 00 	sts	0x006B, r1
 9c6:	0c c0       	rjmp	.+24     	; 0x9e0 <UART_Send+0x76>
		while(a_data_ptr[g_index] != '\0')
		{
			UART_SendChar(a_data_ptr[g_index]);
 9c8:	80 91 6b 00 	lds	r24, 0x006B
 9cc:	28 2f       	mov	r18, r24
 9ce:	30 e0       	ldi	r19, 0x00	; 0
 9d0:	8a 81       	ldd	r24, Y+2	; 0x02
 9d2:	9b 81       	ldd	r25, Y+3	; 0x03
 9d4:	fc 01       	movw	r30, r24
 9d6:	e2 0f       	add	r30, r18
 9d8:	f3 1f       	adc	r31, r19
 9da:	80 81       	ld	r24, Z
 9dc:	0e 94 53 04 	call	0x8a6	; 0x8a6 <UART_SendChar>
		}
	}
	else if(UART_Config.Udr == UART_UdrEn)
	{
		g_index = LOW;
		while(a_data_ptr[g_index] != '\0')
 9e0:	80 91 6b 00 	lds	r24, 0x006B
 9e4:	28 2f       	mov	r18, r24
 9e6:	30 e0       	ldi	r19, 0x00	; 0
 9e8:	8a 81       	ldd	r24, Y+2	; 0x02
 9ea:	9b 81       	ldd	r25, Y+3	; 0x03
 9ec:	fc 01       	movw	r30, r24
 9ee:	e2 0f       	add	r30, r18
 9f0:	f3 1f       	adc	r31, r19
 9f2:	80 81       	ld	r24, Z
 9f4:	88 23       	and	r24, r24
 9f6:	41 f7       	brne	.-48     	; 0x9c8 <UART_Send+0x5e>
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <UART_Send+0x94>
			UART_SendChar(a_data_ptr[g_index]);
		}
	}
	else
	{
		return NotOk;
 9fa:	1c 82       	std	Y+4, r1	; 0x04
 9fc:	02 c0       	rjmp	.+4      	; 0xa02 <UART_Send+0x98>
	}

	return Ok;
 9fe:	81 e0       	ldi	r24, 0x01	; 1
 a00:	8c 83       	std	Y+4, r24	; 0x04
 a02:	8c 81       	ldd	r24, Y+4	; 0x04
}
 a04:	0f 90       	pop	r0
 a06:	0f 90       	pop	r0
 a08:	0f 90       	pop	r0
 a0a:	0f 90       	pop	r0
 a0c:	cf 91       	pop	r28
 a0e:	df 91       	pop	r29
 a10:	08 95       	ret

00000a12 <UART_Receive>:
 *
 * Return:			Status to check function execution
 *******************************************************************************/

Status UART_Receive(uint8 * a_data_ptr)
{
 a12:	df 93       	push	r29
 a14:	cf 93       	push	r28
 a16:	00 d0       	rcall	.+0      	; 0xa18 <UART_Receive+0x6>
 a18:	0f 92       	push	r0
 a1a:	cd b7       	in	r28, 0x3d	; 61
 a1c:	de b7       	in	r29, 0x3e	; 62
 a1e:	9a 83       	std	Y+2, r25	; 0x02
 a20:	89 83       	std	Y+1, r24	; 0x01
	static uint8 loop_index = 0;

	if (UART_Config.RxInt == UART_RxIntDisabled)
 a22:	80 91 64 00 	lds	r24, 0x0064
 a26:	88 23       	and	r24, r24
 a28:	c1 f4       	brne	.+48     	; 0xa5a <UART_Receive+0x48>
 a2a:	0f c0       	rjmp	.+30     	; 0xa4a <UART_Receive+0x38>
	{
		while(UART_UDR != '#'){
			UART_ReceiveChar(&a_data_ptr[loop_index]);
 a2c:	80 91 6d 00 	lds	r24, 0x006D
 a30:	28 2f       	mov	r18, r24
 a32:	30 e0       	ldi	r19, 0x00	; 0
 a34:	89 81       	ldd	r24, Y+1	; 0x01
 a36:	9a 81       	ldd	r25, Y+2	; 0x02
 a38:	82 0f       	add	r24, r18
 a3a:	93 1f       	adc	r25, r19
 a3c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <UART_ReceiveChar>
			loop_index++;
 a40:	80 91 6d 00 	lds	r24, 0x006D
 a44:	8f 5f       	subi	r24, 0xFF	; 255
 a46:	80 93 6d 00 	sts	0x006D, r24
{
	static uint8 loop_index = 0;

	if (UART_Config.RxInt == UART_RxIntDisabled)
	{
		while(UART_UDR != '#'){
 a4a:	ec e2       	ldi	r30, 0x2C	; 44
 a4c:	f0 e0       	ldi	r31, 0x00	; 0
 a4e:	80 81       	ld	r24, Z
 a50:	83 32       	cpi	r24, 0x23	; 35
 a52:	61 f7       	brne	.-40     	; 0xa2c <UART_Receive+0x1a>
			UART_ReceiveChar(&a_data_ptr[loop_index]);
			loop_index++;
		}
		loop_index=0;
 a54:	10 92 6d 00 	sts	0x006D, r1
 a58:	2a c0       	rjmp	.+84     	; 0xaae <UART_Receive+0x9c>
	}
	else if(UART_Config.RxInt == UART_RxIntEn)
 a5a:	80 91 64 00 	lds	r24, 0x0064
 a5e:	81 30       	cpi	r24, 0x01	; 1
 a60:	21 f5       	brne	.+72     	; 0xaaa <UART_Receive+0x98>
	{
		/* ISR will be executed */
		if(UART_UDR != '#'){
 a62:	ec e2       	ldi	r30, 0x2C	; 44
 a64:	f0 e0       	ldi	r31, 0x00	; 0
 a66:	80 81       	ld	r24, Z
 a68:	83 32       	cpi	r24, 0x23	; 35
 a6a:	e1 f0       	breq	.+56     	; 0xaa4 <UART_Receive+0x92>
			UART_ReceiveChar(&a_data_ptr[loop_index]);
 a6c:	80 91 6d 00 	lds	r24, 0x006D
 a70:	28 2f       	mov	r18, r24
 a72:	30 e0       	ldi	r19, 0x00	; 0
 a74:	89 81       	ldd	r24, Y+1	; 0x01
 a76:	9a 81       	ldd	r25, Y+2	; 0x02
 a78:	82 0f       	add	r24, r18
 a7a:	93 1f       	adc	r25, r19
 a7c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <UART_ReceiveChar>
			/* Garbage value detection */
			if (a_data_ptr[loop_index] != LOW)
 a80:	80 91 6d 00 	lds	r24, 0x006D
 a84:	28 2f       	mov	r18, r24
 a86:	30 e0       	ldi	r19, 0x00	; 0
 a88:	89 81       	ldd	r24, Y+1	; 0x01
 a8a:	9a 81       	ldd	r25, Y+2	; 0x02
 a8c:	fc 01       	movw	r30, r24
 a8e:	e2 0f       	add	r30, r18
 a90:	f3 1f       	adc	r31, r19
 a92:	80 81       	ld	r24, Z
 a94:	88 23       	and	r24, r24
 a96:	59 f0       	breq	.+22     	; 0xaae <UART_Receive+0x9c>
			{
				loop_index++;
 a98:	80 91 6d 00 	lds	r24, 0x006D
 a9c:	8f 5f       	subi	r24, 0xFF	; 255
 a9e:	80 93 6d 00 	sts	0x006D, r24
 aa2:	05 c0       	rjmp	.+10     	; 0xaae <UART_Receive+0x9c>
			}
		}
		else
		{
			loop_index=0;
 aa4:	10 92 6d 00 	sts	0x006D, r1
 aa8:	02 c0       	rjmp	.+4      	; 0xaae <UART_Receive+0x9c>
		}
	}
	else
	{
		return NotOk;
 aaa:	1b 82       	std	Y+3, r1	; 0x03
 aac:	02 c0       	rjmp	.+4      	; 0xab2 <UART_Receive+0xa0>
	}
	return Ok;
 aae:	81 e0       	ldi	r24, 0x01	; 1
 ab0:	8b 83       	std	Y+3, r24	; 0x03
 ab2:	8b 81       	ldd	r24, Y+3	; 0x03
}
 ab4:	0f 90       	pop	r0
 ab6:	0f 90       	pop	r0
 ab8:	0f 90       	pop	r0
 aba:	cf 91       	pop	r28
 abc:	df 91       	pop	r29
 abe:	08 95       	ret

00000ac0 <UART_Start>:
 *
 * Return:			Status to check function execution
 *******************************************************************************/

Status UART_Start(void)
{
 ac0:	df 93       	push	r29
 ac2:	cf 93       	push	r28
 ac4:	0f 92       	push	r0
 ac6:	cd b7       	in	r28, 0x3d	; 61
 ac8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UART_UCSRB,UART_TXEN);
 aca:	aa e2       	ldi	r26, 0x2A	; 42
 acc:	b0 e0       	ldi	r27, 0x00	; 0
 ace:	ea e2       	ldi	r30, 0x2A	; 42
 ad0:	f0 e0       	ldi	r31, 0x00	; 0
 ad2:	80 81       	ld	r24, Z
 ad4:	88 60       	ori	r24, 0x08	; 8
 ad6:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRB,UART_RXEN);
 ad8:	aa e2       	ldi	r26, 0x2A	; 42
 ada:	b0 e0       	ldi	r27, 0x00	; 0
 adc:	ea e2       	ldi	r30, 0x2A	; 42
 ade:	f0 e0       	ldi	r31, 0x00	; 0
 ae0:	80 81       	ld	r24, Z
 ae2:	80 61       	ori	r24, 0x10	; 16
 ae4:	8c 93       	st	X, r24

	if(UART_Config.TxInt  == UART_TxIntDisabled)
 ae6:	80 91 63 00 	lds	r24, 0x0063
 aea:	88 23       	and	r24, r24
 aec:	41 f4       	brne	.+16     	; 0xafe <UART_Start+0x3e>
	{
		CLEAR_BIT(UART_UCSRB,UART_TXCIE);
 aee:	aa e2       	ldi	r26, 0x2A	; 42
 af0:	b0 e0       	ldi	r27, 0x00	; 0
 af2:	ea e2       	ldi	r30, 0x2A	; 42
 af4:	f0 e0       	ldi	r31, 0x00	; 0
 af6:	80 81       	ld	r24, Z
 af8:	8f 7b       	andi	r24, 0xBF	; 191
 afa:	8c 93       	st	X, r24
 afc:	15 c0       	rjmp	.+42     	; 0xb28 <UART_Start+0x68>
	}
	else if(UART_Config.TxInt  == UART_TxIntEn)
 afe:	80 91 63 00 	lds	r24, 0x0063
 b02:	81 30       	cpi	r24, 0x01	; 1
 b04:	79 f4       	brne	.+30     	; 0xb24 <UART_Start+0x64>
	{
		SET_BIT(UART_UCSRB,UART_TXCIE);
 b06:	aa e2       	ldi	r26, 0x2A	; 42
 b08:	b0 e0       	ldi	r27, 0x00	; 0
 b0a:	ea e2       	ldi	r30, 0x2A	; 42
 b0c:	f0 e0       	ldi	r31, 0x00	; 0
 b0e:	80 81       	ld	r24, Z
 b10:	80 64       	ori	r24, 0x40	; 64
 b12:	8c 93       	st	X, r24
		SET_BIT(SREG,7);
 b14:	af e5       	ldi	r26, 0x5F	; 95
 b16:	b0 e0       	ldi	r27, 0x00	; 0
 b18:	ef e5       	ldi	r30, 0x5F	; 95
 b1a:	f0 e0       	ldi	r31, 0x00	; 0
 b1c:	80 81       	ld	r24, Z
 b1e:	80 68       	ori	r24, 0x80	; 128
 b20:	8c 93       	st	X, r24
 b22:	02 c0       	rjmp	.+4      	; 0xb28 <UART_Start+0x68>
	}
	else
	{
		return NotOk;
 b24:	19 82       	std	Y+1, r1	; 0x01
 b26:	44 c0       	rjmp	.+136    	; 0xbb0 <UART_Start+0xf0>
	}

	if(UART_Config.Udr == UART_UdrDisabled)
 b28:	80 91 65 00 	lds	r24, 0x0065
 b2c:	88 23       	and	r24, r24
 b2e:	41 f4       	brne	.+16     	; 0xb40 <UART_Start+0x80>
	{
		CLEAR_BIT(UART_UCSRB,UART_UDRIE);
 b30:	aa e2       	ldi	r26, 0x2A	; 42
 b32:	b0 e0       	ldi	r27, 0x00	; 0
 b34:	ea e2       	ldi	r30, 0x2A	; 42
 b36:	f0 e0       	ldi	r31, 0x00	; 0
 b38:	80 81       	ld	r24, Z
 b3a:	8f 7d       	andi	r24, 0xDF	; 223
 b3c:	8c 93       	st	X, r24
 b3e:	15 c0       	rjmp	.+42     	; 0xb6a <UART_Start+0xaa>
	}
	else if(UART_Config.Udr  == UART_UdrEn)
 b40:	80 91 65 00 	lds	r24, 0x0065
 b44:	81 30       	cpi	r24, 0x01	; 1
 b46:	79 f4       	brne	.+30     	; 0xb66 <UART_Start+0xa6>
	{
		SET_BIT(UART_UCSRB,UART_UDRIE);
 b48:	aa e2       	ldi	r26, 0x2A	; 42
 b4a:	b0 e0       	ldi	r27, 0x00	; 0
 b4c:	ea e2       	ldi	r30, 0x2A	; 42
 b4e:	f0 e0       	ldi	r31, 0x00	; 0
 b50:	80 81       	ld	r24, Z
 b52:	80 62       	ori	r24, 0x20	; 32
 b54:	8c 93       	st	X, r24
		SET_BIT(SREG,7);
 b56:	af e5       	ldi	r26, 0x5F	; 95
 b58:	b0 e0       	ldi	r27, 0x00	; 0
 b5a:	ef e5       	ldi	r30, 0x5F	; 95
 b5c:	f0 e0       	ldi	r31, 0x00	; 0
 b5e:	80 81       	ld	r24, Z
 b60:	80 68       	ori	r24, 0x80	; 128
 b62:	8c 93       	st	X, r24
 b64:	02 c0       	rjmp	.+4      	; 0xb6a <UART_Start+0xaa>
	}
	else
	{
		return NotOk;
 b66:	19 82       	std	Y+1, r1	; 0x01
 b68:	23 c0       	rjmp	.+70     	; 0xbb0 <UART_Start+0xf0>
	}

	if(UART_Config.RxInt  == UART_RxIntDisabled)
 b6a:	80 91 64 00 	lds	r24, 0x0064
 b6e:	88 23       	and	r24, r24
 b70:	41 f4       	brne	.+16     	; 0xb82 <UART_Start+0xc2>
	{
		CLEAR_BIT(UART_UCSRB,UART_RXCIE);
 b72:	aa e2       	ldi	r26, 0x2A	; 42
 b74:	b0 e0       	ldi	r27, 0x00	; 0
 b76:	ea e2       	ldi	r30, 0x2A	; 42
 b78:	f0 e0       	ldi	r31, 0x00	; 0
 b7a:	80 81       	ld	r24, Z
 b7c:	8f 77       	andi	r24, 0x7F	; 127
 b7e:	8c 93       	st	X, r24
 b80:	15 c0       	rjmp	.+42     	; 0xbac <UART_Start+0xec>
	}
	else if(UART_Config.RxInt  == UART_RxIntEn)
 b82:	80 91 64 00 	lds	r24, 0x0064
 b86:	81 30       	cpi	r24, 0x01	; 1
 b88:	79 f4       	brne	.+30     	; 0xba8 <UART_Start+0xe8>
	{
		SET_BIT(UART_UCSRB,UART_RXCIE);
 b8a:	aa e2       	ldi	r26, 0x2A	; 42
 b8c:	b0 e0       	ldi	r27, 0x00	; 0
 b8e:	ea e2       	ldi	r30, 0x2A	; 42
 b90:	f0 e0       	ldi	r31, 0x00	; 0
 b92:	80 81       	ld	r24, Z
 b94:	80 68       	ori	r24, 0x80	; 128
 b96:	8c 93       	st	X, r24
		SET_BIT(SREG,7);
 b98:	af e5       	ldi	r26, 0x5F	; 95
 b9a:	b0 e0       	ldi	r27, 0x00	; 0
 b9c:	ef e5       	ldi	r30, 0x5F	; 95
 b9e:	f0 e0       	ldi	r31, 0x00	; 0
 ba0:	80 81       	ld	r24, Z
 ba2:	80 68       	ori	r24, 0x80	; 128
 ba4:	8c 93       	st	X, r24
 ba6:	02 c0       	rjmp	.+4      	; 0xbac <UART_Start+0xec>
	}
	else
	{
		return NotOk;
 ba8:	19 82       	std	Y+1, r1	; 0x01
 baa:	02 c0       	rjmp	.+4      	; 0xbb0 <UART_Start+0xf0>
	}
	return Ok;
 bac:	81 e0       	ldi	r24, 0x01	; 1
 bae:	89 83       	std	Y+1, r24	; 0x01
 bb0:	89 81       	ldd	r24, Y+1	; 0x01
}
 bb2:	0f 90       	pop	r0
 bb4:	cf 91       	pop	r28
 bb6:	df 91       	pop	r29
 bb8:	08 95       	ret

00000bba <UART_Stop>:
 *
 * Return:			Status to check function execution
 *******************************************************************************/

Status UART_Stop(void)
{
 bba:	df 93       	push	r29
 bbc:	cf 93       	push	r28
 bbe:	cd b7       	in	r28, 0x3d	; 61
 bc0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UART_UCSRB,UART_TXEN);
 bc2:	aa e2       	ldi	r26, 0x2A	; 42
 bc4:	b0 e0       	ldi	r27, 0x00	; 0
 bc6:	ea e2       	ldi	r30, 0x2A	; 42
 bc8:	f0 e0       	ldi	r31, 0x00	; 0
 bca:	80 81       	ld	r24, Z
 bcc:	87 7f       	andi	r24, 0xF7	; 247
 bce:	8c 93       	st	X, r24
	CLEAR_BIT(UART_UCSRB,UART_RXEN);
 bd0:	aa e2       	ldi	r26, 0x2A	; 42
 bd2:	b0 e0       	ldi	r27, 0x00	; 0
 bd4:	ea e2       	ldi	r30, 0x2A	; 42
 bd6:	f0 e0       	ldi	r31, 0x00	; 0
 bd8:	80 81       	ld	r24, Z
 bda:	8f 7e       	andi	r24, 0xEF	; 239
 bdc:	8c 93       	st	X, r24
	CLEAR_BIT(UART_UCSRB,UART_UDRIE);
 bde:	aa e2       	ldi	r26, 0x2A	; 42
 be0:	b0 e0       	ldi	r27, 0x00	; 0
 be2:	ea e2       	ldi	r30, 0x2A	; 42
 be4:	f0 e0       	ldi	r31, 0x00	; 0
 be6:	80 81       	ld	r24, Z
 be8:	8f 7d       	andi	r24, 0xDF	; 223
 bea:	8c 93       	st	X, r24
	CLEAR_BIT(UART_UCSRB,UART_TXCIE);
 bec:	aa e2       	ldi	r26, 0x2A	; 42
 bee:	b0 e0       	ldi	r27, 0x00	; 0
 bf0:	ea e2       	ldi	r30, 0x2A	; 42
 bf2:	f0 e0       	ldi	r31, 0x00	; 0
 bf4:	80 81       	ld	r24, Z
 bf6:	8f 7b       	andi	r24, 0xBF	; 191
 bf8:	8c 93       	st	X, r24
	CLEAR_BIT(UART_UCSRB,UART_RXCIE);
 bfa:	aa e2       	ldi	r26, 0x2A	; 42
 bfc:	b0 e0       	ldi	r27, 0x00	; 0
 bfe:	ea e2       	ldi	r30, 0x2A	; 42
 c00:	f0 e0       	ldi	r31, 0x00	; 0
 c02:	80 81       	ld	r24, Z
 c04:	8f 77       	andi	r24, 0x7F	; 127
 c06:	8c 93       	st	X, r24

	return Ok;
 c08:	81 e0       	ldi	r24, 0x01	; 1
}
 c0a:	cf 91       	pop	r28
 c0c:	df 91       	pop	r29
 c0e:	08 95       	ret

00000c10 <__udivmodsi4>:
 c10:	a1 e2       	ldi	r26, 0x21	; 33
 c12:	1a 2e       	mov	r1, r26
 c14:	aa 1b       	sub	r26, r26
 c16:	bb 1b       	sub	r27, r27
 c18:	fd 01       	movw	r30, r26
 c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__udivmodsi4_ep>

00000c1c <__udivmodsi4_loop>:
 c1c:	aa 1f       	adc	r26, r26
 c1e:	bb 1f       	adc	r27, r27
 c20:	ee 1f       	adc	r30, r30
 c22:	ff 1f       	adc	r31, r31
 c24:	a2 17       	cp	r26, r18
 c26:	b3 07       	cpc	r27, r19
 c28:	e4 07       	cpc	r30, r20
 c2a:	f5 07       	cpc	r31, r21
 c2c:	20 f0       	brcs	.+8      	; 0xc36 <__udivmodsi4_ep>
 c2e:	a2 1b       	sub	r26, r18
 c30:	b3 0b       	sbc	r27, r19
 c32:	e4 0b       	sbc	r30, r20
 c34:	f5 0b       	sbc	r31, r21

00000c36 <__udivmodsi4_ep>:
 c36:	66 1f       	adc	r22, r22
 c38:	77 1f       	adc	r23, r23
 c3a:	88 1f       	adc	r24, r24
 c3c:	99 1f       	adc	r25, r25
 c3e:	1a 94       	dec	r1
 c40:	69 f7       	brne	.-38     	; 0xc1c <__udivmodsi4_loop>
 c42:	60 95       	com	r22
 c44:	70 95       	com	r23
 c46:	80 95       	com	r24
 c48:	90 95       	com	r25
 c4a:	9b 01       	movw	r18, r22
 c4c:	ac 01       	movw	r20, r24
 c4e:	bd 01       	movw	r22, r26
 c50:	cf 01       	movw	r24, r30
 c52:	08 95       	ret

00000c54 <_exit>:
 c54:	f8 94       	cli

00000c56 <__stop_program>:
 c56:	ff cf       	rjmp	.-2      	; 0xc56 <__stop_program>
